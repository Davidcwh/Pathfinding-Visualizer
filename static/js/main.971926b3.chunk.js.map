{"version":3,"sources":["constants.js","util/AlgorithmUtil.js","actions/index.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","components/Grid.js","util/algorithms/BFS.js","util/algorithms/DFS.js","util/algorithms/AStar.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","TOTAL_ROW","TOTAL_COL","FINISH_NODE_ROW","FINISH_NODE_COL","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","state","node","neighbours","row","upNode","col","push","rightNode","downNode","leftNode","isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmPaused","isAlgorithmStopped","isShowingPath","showPath","togglePathNode","a","dispatch","type","finishNode","currentNode","stack","Stack","undefined","previousNode","isEmpty","pop","updatePqueue","pqueue","fCost","newPqueue","MinPriorityQueue","priority","inQueue","frontierNode","dequeue","element","enqueue","START_NODE_ROW","START_NODE_COL","NodeFactory","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","isHead","isBacktrack","isPath","hCost","nodeRow","nodeCol","targetRow","targetCol","Math","abs","gCost","generateInitalGrid","grid","r","currentRow","c","generateToggleWallGrid","currentGrid","newGrid","slice","newNode","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","generateMarkHeadGrid","generateUnmarkHeadGrid","generateMarkBacktrackGrid","array","i","length","generateNodeKey","toString","combineReducers","action","selectedAlgorithm","payload","dataStructure","isMousePressed","connect","ownProps","onMouseDown","toggleWallNode","mouseIsNotPressed","nodeType","value","id","className","onMouseUp","onMouseEnter","Grid","this","props","map","rowIndex","key","colIndex","React","Component","BFS","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","startNode","neighbour","DFS","markHeadNode","unmarkHeadNode","markBacktrackNodes","stacks","unvisitedStack","visitedStack","wasBacktracking","backtrack","removeFromStack","filter","backtrackNodes","visitedNode","contains","peek","target","newStack","tempStack","current","AStar","options","text","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","bind","clearBoard","runAlgorithm","pauseAlgorithm","completeAlgorithm","bfs","run","dfs","aStar","greedy","clearWall","notShowingPath","stopAlgorithm","resetDataStructure","showInitialBoard","resetBoardWithWalls","runButtonClass","runButtonText","onClick","LegendItem","style","margin","border","borderRadius","InfoPanel","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.971926b3.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(20);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}\r\n\r\nexport const calculateMahattanDistance = (nodeRow, nodeCol, targetRow, targetCol) => {\r\n    return Math.abs(nodeRow - targetRow) + Math.abs(nodeCol - targetCol);\r\n}\r\n\r\nexport const updatePqueue = (pqueue, node) => {\r\n    const { row, col, fCost } = node;\r\n    const newPqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n    let inQueue = false;\r\n\r\n    while(!pqueue.isEmpty()) {\r\n        const frontierNode = pqueue.dequeue().element;\r\n\r\n        if(frontierNode.row === row && frontierNode.col === col) {\r\n            inQueue = true;\r\n            if(frontierNode.fCost <= fCost) {\r\n                newPqueue.enqueue(frontierNode);\r\n            } else {    \r\n                newPqueue.enqueue(node);\r\n            }\r\n        } else {\r\n            newPqueue.enqueue(frontierNode);\r\n        }\r\n    }\r\n\r\n    if(!inQueue) {\r\n        newPqueue.enqueue(node);\r\n    }\r\n\r\n    return newPqueue;\r\n}","const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nconst mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const onMouseDown = (row, col, dispatch) => {\r\n    dispatch(toggleWallNode(row, col));\r\n    dispatch(mouseIsPressed());\r\n}\r\n\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD'};\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS'};\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const completeAlgorithm = () => {\r\n    return { type: 'COMPLETE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n\r\nexport const markHeadNode = (row, col) => {\r\n    return {\r\n        type: 'MARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const unmarkHeadNode = (row, col) => {\r\n    return {\r\n        type: 'UNMARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const markBacktrackNodes = (array) => {\r\n    return  {\r\n        type: 'MARK_BACKTRACK_NODE',\r\n        payload: { array }\r\n    }\r\n}\r\n","import { gridDetails } from '../constants';\r\nimport { calculateMahattanDistance } from './AlgorithmUtil';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        isHead: false,\r\n        isBacktrack: false,\r\n        previousNode: null,\r\n        isPath: false,\r\n        hCost: calculateMahattanDistance(row, col, FINISH_NODE_ROW, FINISH_NODE_COL),\r\n        gCost: null,\r\n        fCost: null\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = generateInitalGrid();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const currentNode = currentGrid[r][c];\r\n            if(!currentNode.isFinish && !currentNode.isStart) {  \r\n                newGrid[r][c].isWall = currentNode.isWall;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateUnmarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkBacktrackGrid(array, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const { row, col } = array[i];\r\n        const node = newGrid[row][col];\r\n\r\n        const newNode = {\r\n            ...node,\r\n            isBacktrack: true\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}","import { combineReducers } from 'redux';\r\nimport { generateInitalGrid, generateToggleWallGrid, generateToggleFrontierGrid, generateMarkVisitedGrid, generateMarkPathGrid, generateGridWithWalls, generateMarkHeadGrid, generateUnmarkHeadGrid, generateMarkBacktrackGrid } from '../util/GridGenerationUtil'\r\n\r\nconst gridReducer = (state=generateInitalGrid(), action) => {\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            return generateToggleWallGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            return generateToggleFrontierGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_VISITED_NODE':\r\n            return generateMarkVisitedGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            return generateMarkPathGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            return generateInitalGrid();\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            return generateGridWithWalls(state);\r\n\r\n        case 'MARK_HEAD_NODE':\r\n            return generateMarkHeadGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'UNMARK_HEAD_NODE':\r\n            return generateUnmarkHeadGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'MARK_BACKTRACK_NODE':\r\n            return generateMarkBacktrackGrid(action.payload.array, state);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        case 'ASTAR':\r\n            return 'ASTAR';\r\n\r\n        case 'GREED':\r\n            return 'GREED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        case 'COMPLETE_ALGORITHM':\r\n            return 'COMPLETE';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    grid: gridReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, onMouseDown } from '../actions'\r\n\r\nconst Node = ({ row, col, isStart, isFinish, isWall, isHead, isVisited, isFrontier, isPath, isBacktrack, isMousePressed, onMouseDown, mouseIsNotPressed, gCost, fCost, selectedAlgorithm }) => {\r\n    const nodeType = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isPath\r\n        ? 'node-path'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : isHead\r\n        ? 'node-head'\r\n        : isBacktrack\r\n        ? 'node-backtrack'\r\n        : isVisited\r\n        ? 'node-visited'\r\n        : isFrontier\r\n        ? 'node-frontier'\r\n        : ''\r\n\r\n    const value = ((selectedAlgorithm === 'ASTAR' || selectedAlgorithm === 'GREED') && (fCost !== null)) ? fCost : ''\r\n\r\n    return <div \r\n            id={`node-${row}-${col}`}\r\n            className={`node ${nodeType}`}\r\n            onMouseDown={(!isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}\r\n            onMouseUp={mouseIsNotPressed}\r\n            onMouseEnter={(isMousePressed && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}>{value}</div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.grid[ownProps.row][ownProps.col];\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isHead: node.isHead,\r\n        isBacktrack: node.isBacktrack,\r\n        isMousePressed: state.isMousePressed,\r\n        hCost: node.hCost,\r\n        gCost: node.gCost,\r\n        fCost: node.fCost,\r\n        selectedAlgorithm: state.selectedAlgorithm\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onMouseDown: () => onMouseDown(ownProps.row, ownProps.col, dispatch),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil'\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const {grid} = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\n\r\nimport Queue from 'queue-fifo';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n  \r\nexport default class BFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class DFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.markHeadNode = markHeadNode;\r\n        this.unmarkHeadNode = unmarkHeadNode;\r\n        this.markBacktrackNodes = markBacktrackNodes;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, stacks) {\r\n        let unvisitedStack = null;\r\n        let visitedStack = null;\r\n        let wasBacktracking = null;\r\n\r\n        if(stacks === null) {\r\n            unvisitedStack = new Stack();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            unvisitedStack.push(startNode);\r\n\r\n            visitedStack = new Stack();\r\n            wasBacktracking = false;\r\n        } else {\r\n            unvisitedStack = stacks.unvisitedStack;\r\n            visitedStack = stacks.visitedStack;\r\n            wasBacktracking = stacks.wasBacktracking;\r\n        }\r\n\r\n        while(!unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            if(wasBacktracking) {\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n                await sleep(20);\r\n                continue;\r\n            }\r\n\r\n\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n            this.markHeadNode(currentNode.row, currentNode.col);\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n                this.unmarkHeadNode(row, col);\r\n            }\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n\r\n            if(validNeighbours.length === 0) {\r\n                // console.log(`deadend: ${currentNode.row}, ${currentNode.col}`)\r\n                // console.log(`unvisited: ${unvisitedStack.toArray().map(i => `(${i.row}, ${i.col}) `)}`)\r\n                // console.log(`visited: ${visitedStack.toArray().map(i => `(${i.row}, ${i.col}) `)}`)\r\n                currentNode.isHead = false;\r\n                this.unmarkHeadNode(currentNode.row, currentNode.col);\r\n                await sleep(20);\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n            await sleep(50);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure({ unvisitedStack: unvisitedStack, visitedStack: visitedStack, wasBacktracking: wasBacktracking });\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    async backtrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                // console.log(`backtrack ${unvisitedStack.peek().row}, ${unvisitedStack.peek().col}`)\r\n                visitedStack.push(visitedNode);\r\n                this.markBacktrackNodes(backtrackNodes);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n\r\n    contains(neighbours, target) {\r\n        for(let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            if(neighbour.row === target.row && neighbour.col === target.col) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    removeFromStack(stack, target) {\r\n        const newStack = new Stack();\r\n        const tempStack = new Stack();\r\n\r\n        while(!stack.isEmpty()) {\r\n            const current = stack.pop();\r\n            if(current.row === target.row && current.col === target.col) {\r\n                continue;\r\n            }\r\n\r\n            tempStack.push(current);\r\n        }\r\n\r\n        while(!tempStack.isEmpty()) {\r\n            newStack.push(tempStack.pop());\r\n        }\r\n\r\n        return newStack;\r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\n\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class AStar {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            startNode.gCost = 0;\r\n            startNode.fCost = startNode.gCost + startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    \r\n                    neighbour.gCost = currentNode.gCost + 1;\r\n                    neighbour.fCost = neighbour.gCost + neighbour.hCost;\r\n                    pqueue = updatePqueue(pqueue, neighbour);\r\n                }\r\n            }\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' },\r\n    { key: 3, text: 'A* Search', value: 'ASTAR' },\r\n    { key: 4, text: 'Greedy Best-First Search', value: 'GREED' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'ASTAR'\r\n                                                                              ? 'A* Search'\r\n                                                                              : this.props.selectedAlgorithm === 'GREED'\r\n                                                                              ? 'Greedy Best-First Search'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { showInitialBoard, runAlgorithm, stopAlgorithm, pauseAlgorithm, completeAlgorithm, toggleFrontierNode, toggleVisitedNode, togglePathNode, resetDataStructure, setDataStructure, notShowingPath, markHeadNode, unmarkHeadNode, resetBoardWithWalls, markBacktrackNodes } from '../actions';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport AStar from '../util/algorithms/AStar';\r\nimport { isAlgorithmRunning } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { selectedAlgorithm, \r\n                runAlgorithm, \r\n                pauseAlgorithm,\r\n                completeAlgorithm, \r\n                grid,\r\n                dataStructure,\r\n                toggleVisitedNode, \r\n                toggleFrontierNode, \r\n                togglePathNode,\r\n                setDataStructure,\r\n                isShowingPath,\r\n                markHeadNode,\r\n                unmarkHeadNode,\r\n                algorithmStatus,\r\n                markBacktrackNodes } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"ASTAR\":\r\n                const aStar = new AStar(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await aStar.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"GREED\":\r\n                const greedy = new AStar(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await greedy.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            completeAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard(clearWall) {\r\n        this.props.notShowingPath();\r\n        this.props.stopAlgorithm();\r\n        this.props.resetDataStructure();\r\n\r\n        if(clearWall) {\r\n            this.props.showInitialBoard();\r\n        } else {\r\n            this.props.resetBoardWithWalls();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') ? \"active item\" : \"item\";\r\n\r\n        let runButtonText = \"Run\";\r\n        if((algorithmStatus === 'RUNNING' && isShowingPath) || algorithmStatus === 'COMPLETE') {\r\n            runButtonText = \"Complete\";\r\n        }\r\n\r\n        if(algorithmStatus === 'RUNNING' && !isShowingPath) {\r\n            runButtonText = \"Pause\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui four item menu\">\r\n                <a  onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={() => this.clearBoard(false)} className=\"item\">Clear Path</a>\r\n                <a onClick={() => this.clearBoard(true)} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: () => dispatch(showInitialBoard()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath()),\r\n        markHeadNode: (row, col) => dispatch(markHeadNode(row, col)),\r\n        unmarkHeadNode: (row, col) => dispatch(unmarkHeadNode(row, col)),\r\n        resetBoardWithWalls: () => dispatch(resetBoardWithWalls()),\r\n        markBacktrackNodes: (array) => dispatch(markBacktrackNodes(array))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\n\r\nconst LegendItem = ({nodeType}) => {\r\n    return (\r\n        <div className=\"column\" style={{margin: \"0 5vh 5vh 3vh\"}}>\r\n            <div className={`node node-${nodeType}`} style={{border: \"2px solid white\", borderRadius: \"5px\"}}></div>\r\n            <div>{nodeType}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst InfoPanel = () => {\r\n    return (\r\n        <div className=\"ui center aligned grid\">\r\n            <div className=\"row \"style={{margin: \"2vh 0 0 0\"}}><h2 className=\"ui dividing header\">Legend</h2></div>\r\n            <LegendItem nodeType={'unvisited'} />\r\n            <LegendItem nodeType={'start'} />\r\n            <LegendItem nodeType={'finish'} />\r\n            <LegendItem nodeType={'wall'} />\r\n            <LegendItem nodeType={'visited'} />\r\n            <LegendItem nodeType={'backtrack'} />\r\n            <LegendItem nodeType={'frontier'} />\r\n            <LegendItem nodeType={'path'} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoPanel;","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}