{"version":3,"sources":["constants.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","actions/index.js","components/Grid.js","util/AlgorithmUtil.js","util/algorithms/BFS.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TOTAL_ROW","TOTAL_COL","generateInitalGrid","row","col","grid","r","currentRow","c","push","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","previousNode","isPath","generateToggleWallGrid","currentGrid","newGrid","slice","node","newNode","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateNodeKey","toString","combineReducers","algorithmStatus","state","action","type","selectedAlgorithm","payload","dataStructure","isMousePressed","connect","ownProps","dispatch","onMouseDown","toggleWallNode","mouseIsNotPressed","nodeType","id","className","onMouseUp","onMouseEnter","Grid","this","props","map","rowIndex","key","colIndex","React","Component","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","neighbours","upNode","rightNode","downNode","leftNode","isAlgorithmRunning","console","log","store","getState","showPath","togglePathNode","a","finishNode","currentNode","stack","Stack","undefined","isEmpty","pop","BFS","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","startNode","enqueue","dequeue","i","length","neighbour","options","text","value","SelectAlgorithmDropdown","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","bind","clearBoard","runAlgorithm","stopAlgorithm","pauseAlgorithm","bfs","run","resetDataStructure","showInitialBoard","runButtonClass","runButtonText","onClick","LegendItem","style","margin","border","borderRadius","InfoPanel","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9b0f74e4.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}","import { gridDetails } from '../constants';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        previousNode: null,\r\n        isPath: false\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: !node.isFrontier\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}","import { combineReducers } from 'redux';\r\nimport { generateInitalGrid, generateToggleWallGrid, generateToggleFrontierGrid, generateMarkVisitedGrid, generateMarkPathGrid } from '../util/GridGenerationUtil'\r\n\r\nconst gridReducer = (state=generateInitalGrid(), action) => {\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            return generateToggleWallGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            return generateToggleFrontierGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_VISITED_NODE':\r\n            return generateMarkVisitedGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            return generateMarkPathGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            return generateInitalGrid();\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    grid: gridReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, onMouseDown } from '../actions'\r\n\r\nconst Node = ({ row, col, isStart, isFinish, isWall, isVisited, isFrontier, isPath, isMousePressed, onMouseDown, mouseIsNotPressed}) => {\r\n    const nodeType = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isPath\r\n        ? 'node-path'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : isVisited\r\n        ? 'node-visited'\r\n        : isFrontier\r\n        ? 'node-frontier'\r\n        : ''\r\n\r\n    return <div \r\n            id={`node-${row}-${col}`}\r\n            className={`node ${nodeType}`}\r\n            onMouseDown={(!isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}\r\n            onMouseUp={mouseIsNotPressed}\r\n            onMouseEnter={(isMousePressed && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}></div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.grid[ownProps.row][ownProps.col];\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isMousePressed: state.isMousePressed\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onMouseDown: () => onMouseDown(ownProps.row, ownProps.col, dispatch),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nconst mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const onMouseDown = (row, col, dispatch) => {\r\n    dispatch(toggleWallNode(row, col));\r\n    dispatch(mouseIsPressed());\r\n}\r\n\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD'};\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil'\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const {grid} = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nconst { TOTAL_ROW, TOTAL_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    console.log(`isAlgorithmRunning:${store.getState().algorithmStatus} `)\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nexport async function showPath(state, togglePathNode) {\r\n    const finishNode = state[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(0);\r\n    }\r\n}","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\n\r\nimport Queue from 'queue-fifo';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n  \r\nexport default class BFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        console.log(grid)\r\n        console.log(queue)\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        return (\r\n            <Dropdown fluid text='Select Algorithm' options={options} simple item onChange={(event, data) => {this.props.onChange(data.value)}}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(null, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { showInitialBoard, runAlgorithm, stopAlgorithm, pauseAlgorithm, toggleFrontierNode, toggleVisitedNode, togglePathNode, resetDataStructure, setDataStructure } from '../actions';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport { isAlgorithmRunning } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { selectedAlgorithm, \r\n                runAlgorithm, \r\n                stopAlgorithm, \r\n                pauseAlgorithm, \r\n                grid,\r\n                dataStructure,\r\n                toggleVisitedNode, \r\n                toggleFrontierNode, \r\n                togglePathNode,\r\n                setDataStructure } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            stopAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard() {\r\n        this.props.stopAlgorithm();\r\n        this.props.resetDataStructure();\r\n        this.props.showInitialBoard();\r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus } = this.props;\r\n\r\n        const runButtonClass = selectedAlgorithm === 'none' ? \"active item\" : \"item\";\r\n\r\n        const runButtonText = (algorithmStatus === 'RUNNING') ? \"Pause\" : \"Run\";\r\n\r\n        return (\r\n            <div className=\"ui three item menu\">\r\n                <a onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={this.clearBoard} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: () => dispatch(showInitialBoard()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\n\r\nconst LegendItem = ({nodeType}) => {\r\n    return (\r\n        <div className=\"column\" style={{margin: \"0 5vh 5vh 3vh\"}}>\r\n            <div className={`node node-${nodeType}`} style={{border: \"2px solid white\", borderRadius: \"5px\"}}></div>\r\n            <div>{nodeType}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst InfoPanel = () => {\r\n    return (\r\n        <div className=\"ui center aligned grid\">\r\n            <div className=\"row \"style={{margin: \"2vh 0 0 0\"}}><h2 className=\"ui dividing header\">Legend</h2></div>\r\n            <LegendItem nodeType={'unvisited'} />\r\n            <LegendItem nodeType={'start'} />\r\n            <LegendItem nodeType={'finish'} />\r\n            <LegendItem nodeType={'wall'} />\r\n            <LegendItem nodeType={'visited'} />\r\n            <LegendItem nodeType={'frontier'} />\r\n            <LegendItem nodeType={'path'} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoPanel;","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}