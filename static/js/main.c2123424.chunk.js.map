{"version":3,"sources":["constants.js","actions/index.js","util/AlgorithmUtil.js","util/algorithms/BFS.js","util/algorithms/DFS.js","util/algorithms/AStar.js","util/algorithms/Greedy.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","components/Grid.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","defaultStatistics","wall","unvisited","visited","backtrack","frontier","path","dispatchMultipleActions","actions","i","length","calculateHCost","endNode","type","payload","row","col","TOTAL_ROW","TOTAL_COL","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","state","node","neighbours","upNode","push","rightNode","downNode","leftNode","isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmPaused","isAlgorithmStopped","isShowingPath","showPath","togglePathNode","endRow","endCol","a","dispatch","finishNode","currentNode","stack","Stack","undefined","previousNode","isEmpty","pop","updatePqueue","pqueue","fCost","newPqueue","MinPriorityQueue","priority","inQueue","frontierNode","dequeue","element","enqueue","BFS","startNode","toggleVisitedNode","toggleFrontierNode","setDataStructure","this","grid","queue","Queue","isFrontier","isVisited","isFinish","neighbour","isWall","currentGrid","slice","isPath","DFS","markHeadNode","unmarkHeadNode","markBacktrackNodes","stacks","unvisitedStack","visitedStack","wasBacktracking","removeFromStack","isHead","filter","backtrackNodes","visitedNode","contains","peek","target","newStack","tempStack","current","rerunBacktrack","map","isBacktrack","AStar","gCost","hCost","tempG","tempF","Greedy","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","NodeFactory","isStart","distance","Infinity","generateInitalGrid","r","currentRow","c","generatePlainGrid","newGrid","newNode","generateToggleWallGrid","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","generateMarkHeadGrid","generateUnmarkHeadGrid","generateMarkBacktrackGrid","array","generateNewStartGrid","newStart","oldStart","start","end","generateRemoveOldStartGrid","startRow","startCol","generateNewEndGrid","generateNodeKey","toString","getStatistics","stats","leftover","generateRandomGrid","Math","random","calculateGridHCost","nodeRow","nodeCol","targetRow","targetCol","abs","generateRerunAlgorithmGrid","selectedAlgorithm","rerun","aStar","updatedGridWithHCost","greedy","updatedGridWithHCost1","initialMoveStartEnd","isStartMoving","isEndMoving","combineReducers","action","board","statistics","dataStructure","isMousePressed","moveStartEnd","Node","props","onMouseDownHandler","bind","onMouseEnterHandler","onMouseUpHandler","onMouseLeaveHandler","toggleWallNode","mouseIsPressed","startNodeMoving","endNodeMoving","onMouseDownActions","mouseIsNotPressed","setStartNode","setEndNode","rerunAlgorithm","nodeType","value","id","className","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","React","Component","connect","ownProps","isMoving","removeStartNode","Grid","rowIndex","key","colIndex","options","text","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","clearBoard","runAlgorithm","pauseAlgorithm","completeAlgorithm","bfs","run","dfs","clearWall","notShowingPath","stopAlgorithm","resetDataStructure","showInitialBoard","resetBoardWithWalls","clearBoardActions","runButtonClass","canGenerateRandomGrid","randomGridButtonClass","runButtonText","onClick","InfoPanel","displayValue","style","width","margin","marginTop","class","border","borderRadius","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.c2123424.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}\r\n\r\nexport const defaultStatistics = {\r\n    wall: 0,\r\n    unvisited: gridDetails.TOTAL_ROW * gridDetails.TOTAL_COL - 2,\r\n    visited: 0,\r\n    backtrack: 0,\r\n    frontier: 0,\r\n    path: 0\r\n}\r\n\r\nexport const wallRatio = 0.3;","export const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const dispatchMultipleActions = (actions) => {\r\n    for(let i = 0; i < actions.length; i++) {\r\n        actions[i]();\r\n    }\r\n}\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD' };\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS' };\r\n}\r\n\r\nexport const generateRandomGrid = (endNde) => {\r\n    return { type: 'GENERATE_RANDOM_GRID' };\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const completeAlgorithm = () => {\r\n    return { type: 'COMPLETE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n\r\nexport const markHeadNode = (row, col) => {\r\n    return {\r\n        type: 'MARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const unmarkHeadNode = (row, col) => {\r\n    return {\r\n        type: 'UNMARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const markBacktrackNodes = (array) => {\r\n    return  {\r\n        type: 'MARK_BACKTRACK_NODE',\r\n        payload: { array }\r\n    }\r\n}\r\n\r\nexport const startNodeMoving = (isMoving) => {\r\n    return { type: (isMoving ? 'START_NODE_MOVING' : 'START_NODE_NOT_MOVING') };\r\n}\r\n\r\nexport const startNodeNotMoving = () => {\r\n    return { type: 'START_NODE_NOT_MOVING' };\r\n}\r\n\r\nexport const endNodeMoving = (isMoving) => {\r\n    return { type: (isMoving? 'END_NODE_MOVING' : 'END_NODE_NOT_MOVING') };\r\n}\r\n\r\nexport const endNodeNotMoving = () => {\r\n    return { type: 'END_NODE_NOT_MOVING' };\r\n}\r\n\r\nexport const setStartNode = (newStart, oldStart) => {\r\n    return {\r\n        type: 'SET_START_NODE',\r\n        payload: { newStart, oldStart }\r\n    }\r\n}\r\n\r\nexport const setEndNode = (row, col) => {\r\n    return {\r\n        type: 'SET_END_NODE',\r\n        payload: { row, col }\r\n    }\r\n}\r\n\r\nexport const calculateHCost = (endNode) => {\r\n    return { \r\n        type: 'CALCULATE_HCOST',\r\n        payload: {\r\n            row: endNode.row,\r\n            col: endNode.col\r\n        }\r\n    };\r\n}\r\n\r\nexport const rerunAlgorithm = (selectedAlgorithm, startNode, endNode) => {\r\n    return {\r\n        type: 'RERUN_ALGORITHM',\r\n        payload: { selectedAlgorithm, startNode, endNode }\r\n    }\r\n}\r\n\r\nexport const removeStartNode = (row, col) => {\r\n    return {\r\n        type: 'REMOVE_START_NODE',\r\n        payload: { row, col }\r\n    }\r\n}","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode, endRow, endCol) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[endRow][endCol];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(20);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}\r\n\r\nexport const calculateMahattanDistance = (nodeRow, nodeCol, targetRow, targetCol) => {\r\n    return Math.abs(nodeRow - targetRow) + Math.abs(nodeCol - targetCol);\r\n}\r\n\r\nexport const updatePqueue = (pqueue, node) => {\r\n    const { row, col, fCost } = node;\r\n    const newPqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n    let inQueue = false;\r\n\r\n    while(!pqueue.isEmpty()) {\r\n        const frontierNode = pqueue.dequeue().element;\r\n\r\n        if(frontierNode.row === row && frontierNode.col === col) {\r\n            inQueue = true;\r\n            if(frontierNode.fCost <= fCost) {\r\n                newPqueue.enqueue(frontierNode);\r\n            } else {    \r\n                newPqueue.enqueue(node);\r\n            }\r\n        } else {\r\n            newPqueue.enqueue(frontierNode);\r\n        }\r\n    }\r\n\r\n    if(!inQueue) {\r\n        newPqueue.enqueue(node);\r\n    }\r\n\r\n    return newPqueue;\r\n}","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Queue from 'queue-fifo';\r\n  \r\nexport default class BFS {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                // if(neighbour.isFinish) {\r\n                //     await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                //     return;\r\n                // }\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n\r\n    rerun(currentGrid) {\r\n        const grid = currentGrid.slice();\r\n\r\n        const queue = new Queue();\r\n        const startNode = grid[this.startNode.row][this.startNode.col];\r\n        queue.enqueue(startNode);\r\n\r\n        while(!queue.isEmpty()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n\r\n            if(currentNode.isFinish) {\r\n\r\n                let node = currentNode;\r\n                while(node !== undefined) {\r\n                    node.isPath = true;\r\n                    if(!node.previousNode) {\r\n                        break;\r\n                    }\r\n                    node = grid[node.previousNode.row][node.previousNode.col]\r\n                }\r\n\r\n\r\n                return grid;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n        }\r\n\r\n        return grid;\r\n    }\r\n}\r\n","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nexport default class DFS {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.markHeadNode = markHeadNode;\r\n        this.unmarkHeadNode = unmarkHeadNode;\r\n        this.markBacktrackNodes = markBacktrackNodes;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, stacks) {\r\n        let unvisitedStack = null;\r\n        let visitedStack = null;\r\n        let wasBacktracking = null;\r\n\r\n        if(stacks === null) {\r\n            unvisitedStack = new Stack();\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            unvisitedStack.push(startNode);\r\n\r\n            visitedStack = new Stack();\r\n            wasBacktracking = false;\r\n        } else {\r\n            unvisitedStack = stacks.unvisitedStack;\r\n            visitedStack = stacks.visitedStack;\r\n            wasBacktracking = stacks.wasBacktracking;\r\n        }\r\n\r\n        while(!unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            if(wasBacktracking) {\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n                await sleep(20);\r\n                continue;\r\n            }\r\n\r\n\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n            this.markHeadNode(currentNode.row, currentNode.col);\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n                this.unmarkHeadNode(row, col);\r\n            }\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => ((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish))\r\n\r\n            if(validNeighbours.length === 0) {\r\n                currentNode.isHead = false;\r\n                this.unmarkHeadNode(currentNode.row, currentNode.col);\r\n                await sleep(20);\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure({ unvisitedStack: unvisitedStack, visitedStack: visitedStack, wasBacktracking: wasBacktracking });\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    async backtrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                visitedStack.push(visitedNode);\r\n                this.markBacktrackNodes(backtrackNodes);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n\r\n    contains(neighbours, target) {\r\n        for(let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            if(neighbour.row === target.row && neighbour.col === target.col) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    removeFromStack(stack, target) {\r\n        const newStack = new Stack();\r\n        const tempStack = new Stack();\r\n\r\n        while(!stack.isEmpty()) {\r\n            const current = stack.pop();\r\n            if(current.row === target.row && current.col === target.col) {\r\n                continue;\r\n            }\r\n\r\n            tempStack.push(current);\r\n        }\r\n\r\n        while(!tempStack.isEmpty()) {\r\n            newStack.push(tempStack.pop());\r\n        }\r\n\r\n        return newStack;\r\n    }\r\n\r\n    rerun(currentGrid) {\r\n        const grid = currentGrid.slice();\r\n\r\n        let unvisitedStack = new Stack();\r\n        const startNode = grid[this.startNode.row][this.startNode.col];\r\n        unvisitedStack.push(startNode);\r\n\r\n        const visitedStack = new Stack();\r\n\r\n        while(!unvisitedStack.isEmpty()) {\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n            }\r\n\r\n            if(currentNode.isFinish) {\r\n                let node = currentNode;\r\n                while(node !== undefined) {\r\n                    node.isPath = true;\r\n                    if(!node.previousNode) {\r\n                        break;\r\n                    }\r\n                    node = grid[node.previousNode.row][node.previousNode.col]\r\n                }\r\n                return grid;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => ((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish))\r\n\r\n            if(validNeighbours.length === 0) {\r\n                currentNode.isHead = false;\r\n                this.rerunBacktrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n        }\r\n\r\n        return grid;\r\n    }\r\n\r\n    rerunBacktrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => ((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish))\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                visitedStack.push(visitedNode);\r\n                backtrackNodes.map(node => node.isBacktrack = true);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n}\r\n","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nexport default class AStar {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            startNode.gCost = 0;\r\n            startNode.fCost = startNode.gCost + startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                \r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n                    const tempG = currentNode.gCost + 1;\r\n                    const tempF = tempG + neighbour.hCost;\r\n                    if(neighbour.gCost !== null) {\r\n                        if(tempF < neighbour.fCost) {\r\n                            neighbour.gCost = tempG;\r\n                            neighbour.fCost = tempF;\r\n                            neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                            pqueue = updatePqueue(pqueue, neighbour);\r\n                        } \r\n                    } else {\r\n                        neighbour.gCost = tempG;\r\n                        neighbour.fCost = tempF;\r\n                        pqueue.enqueue(neighbour);\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    }\r\n\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    rerun(currentGrid) {\r\n        const grid = currentGrid.slice();\r\n\r\n        let pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n        const startNode = grid[this.startNode.row][this.startNode.col];\r\n        startNode.gCost = 0;\r\n        startNode.fCost = startNode.gCost + startNode.hCost;\r\n        pqueue.enqueue(startNode);\r\n\r\n        while(!pqueue.isEmpty()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n\r\n            if(currentNode.isFinish) {\r\n                let node = currentNode;\r\n                while(node !== undefined) {\r\n                    node.isPath = true;\r\n                    if(!node.previousNode) {\r\n                        break;\r\n                    }\r\n                    node = grid[node.previousNode.row][node.previousNode.col]\r\n                }\r\n                return grid;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                \r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n                    const tempG = currentNode.gCost + 1;\r\n                    const tempF = tempG + neighbour.hCost;\r\n                    if(neighbour.gCost !== null) {\r\n                        if(tempF < neighbour.fCost) {\r\n                            neighbour.gCost = tempG;\r\n                            neighbour.fCost = tempF;\r\n                            neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                            pqueue = updatePqueue(pqueue, neighbour);\r\n                        } \r\n                    } else {\r\n                        neighbour.gCost = tempG;\r\n                        neighbour.fCost = tempF;\r\n                        pqueue.enqueue(neighbour);\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return grid;\r\n    }\r\n}","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nexport default class Greedy {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            startNode.fCost = startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n\r\n                    if(!neighbour.isFrontier) {\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                        this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n\r\n                        neighbour.fCost = neighbour.hCost;\r\n                        pqueue = updatePqueue(pqueue, neighbour);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    rerun(grid) {\r\n        let pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n        const startNode = grid[this.startNode.row][this.startNode.col];\r\n        startNode.fCost = startNode.hCost;\r\n        pqueue.enqueue(startNode);\r\n\r\n        while(!pqueue.isEmpty()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n\r\n            if(currentNode.isFinish) {\r\n                let node = currentNode;\r\n                while(node !== undefined) {\r\n                    node.isPath = true;\r\n                    if(!node.previousNode) {\r\n                        break;\r\n                    }\r\n                    node = grid[node.previousNode.row][node.previousNode.col]\r\n                }\r\n                return grid;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n\r\n                    if(!neighbour.isFrontier) {\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n\r\n                        neighbour.fCost = neighbour.hCost;\r\n                        pqueue = updatePqueue(pqueue, neighbour);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n       return grid;\r\n    }\r\n}","import { gridDetails, defaultStatistics, wallRatio } from '../constants';\r\nimport { calculateMahattanDistance } from './AlgorithmUtil';\r\nimport BFS from './algorithms/BFS';\r\nimport DFS from './algorithms/DFS';\r\nimport AStar from './algorithms/AStar';\r\nimport Greedy from './algorithms/Greedy';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        isHead: false,\r\n        isBacktrack: false,\r\n        previousNode: null,\r\n        isPath: false,\r\n        hCost: null,\r\n        gCost: null,\r\n        fCost: null\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generatePlainGrid(currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            const newNode = NodeFactory(r, c);\r\n\r\n            newNode.isStart = node.isStart;\r\n            newNode.isFinish = node.isFinish;\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            const newNode = NodeFactory(r, c);\r\n\r\n            newNode.isStart = node.isStart;\r\n            newNode.isFinish = node.isFinish;\r\n            newNode.isWall = node.isWall;\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateUnmarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkBacktrackGrid(array, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const { row, col } = array[i];\r\n        const node = newGrid[row][col];\r\n\r\n        const newNode = {\r\n            ...node,\r\n            isBacktrack: true\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNewStartGrid(newStart, oldStart, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    const start = {\r\n        ...newGrid[newStart.row][newStart.col],\r\n        isStart: true\r\n    }\r\n\r\n    const end = {\r\n        ...newGrid[oldStart.row][oldStart.col],\r\n        isStart: false\r\n    }\r\n\r\n    newGrid[newStart.row][newStart.col] = start;\r\n    newGrid[oldStart.row][oldStart.col] = end;\r\n    return newGrid;\r\n}\r\n\r\nexport function generateRemoveOldStartGrid(currentGrid, startRow, startCol) {\r\n    const grid = currentGrid.slice();\r\n    grid[startRow][startCol].start = false;\r\n    return grid;\r\n}\r\n\r\nexport function generateNewEndGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            let isFinish = r === row && c === col;\r\n\r\n            const newNode = {\r\n                ...node,\r\n                isFinish: isFinish\r\n            }\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}\r\n\r\nexport function getStatistics(grid) {\r\n    const stats = { ...defaultStatistics };\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = grid[r][c];\r\n\r\n            if(node.isWall && !node.isFinish && !node.isStart) {\r\n                stats.wall++;\r\n            }\r\n\r\n            if(node.isVisited) {\r\n                stats.visited++;\r\n            }\r\n\r\n            if(node.isBacktrack) {\r\n                stats.backtrack++;\r\n            }\r\n\r\n            if(node.isFrontier) {\r\n                stats.frontier++;\r\n            }\r\n            \r\n            if(node.isPath) {\r\n                stats.path++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const leftover = (TOTAL_ROW * TOTAL_COL - 2) - stats.wall - stats.visited - stats.frontier;\r\n    stats.unvisited = leftover <= 0 ? 0 : leftover;\r\n\r\n    return stats;\r\n}\r\n\r\nfunction setAsWall() {\r\n    return Math.random() < wallRatio;\r\n}\r\n\r\nexport function generateRandomGrid(currentGrid) {\r\n    const newGrid = generatePlainGrid(currentGrid);\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n            node.hCost = null;\r\n\r\n            if(!node.isStart && !node.isFinish) {\r\n                node.isWall = setAsWall();\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function calculateGridHCost(currentGrid, endRow, endCol) {\r\n    const newGrid = currentGrid.slice();\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n            node.hCost = calculateMahattanDistance(r, c, endRow, endCol);\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateRerunAlgorithmGrid(currentGrid, selectedAlgorithm, startNode, endNode) {\r\n    switch(selectedAlgorithm) {\r\n        case 'BFS':\r\n            const bfs = new BFS(startNode);\r\n            return bfs.rerun(generateGridWithWalls(currentGrid));\r\n\r\n        case 'DFS':\r\n            const dfs = new DFS(startNode);\r\n            return dfs.rerun(generateGridWithWalls(currentGrid));\r\n\r\n        case 'ASTAR':\r\n            const aStar = new AStar(startNode);\r\n            const updatedGridWithHCost = calculateGridHCost(generateGridWithWalls(currentGrid), endNode.row, endNode.col)\r\n            return aStar.rerun(updatedGridWithHCost);\r\n\r\n\r\n        case 'GREED':\r\n            const greedy = new Greedy(startNode);\r\n            const updatedGridWithHCost1 = calculateGridHCost(generateGridWithWalls(currentGrid), endNode.row, endNode.col)\r\n            return greedy.rerun(updatedGridWithHCost1);\r\n\r\n        default:\r\n            return currentGrid;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { defaultStatistics } from '../constants';\r\nimport { gridDetails } from '../constants';\r\nimport { \r\n    generateInitalGrid,\r\n    generateToggleWallGrid, \r\n    generateToggleFrontierGrid, \r\n    generateMarkVisitedGrid, \r\n    generateMarkPathGrid, \r\n    generateGridWithWalls, \r\n    generateMarkHeadGrid, \r\n    generateUnmarkHeadGrid, \r\n    generateMarkBacktrackGrid, \r\n    getStatistics,\r\n    generateRandomGrid,\r\n    generatePlainGrid,\r\n    generateNewStartGrid,\r\n    generateNewEndGrid,\r\n    calculateGridHCost,\r\n    generateRerunAlgorithmGrid,\r\n    generateRemoveOldStartGrid\r\n } from '../util/GridGenerationUtil';\r\n\r\nconst boardReducer = (state={ grid: generateInitalGrid(), statistics: defaultStatistics }, action) => {\r\n    let newGrid = state.grid;\r\n    let newStatistics = state.statistics;\r\n\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            newGrid = generateToggleWallGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            newGrid = generateToggleFrontierGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n            \r\n        case 'TOGGLE_VISITED_NODE':\r\n            newGrid = generateMarkVisitedGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            newGrid = generateMarkPathGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            newGrid = generatePlainGrid(state.grid);\r\n            break;\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            newGrid = generateGridWithWalls(state.grid);\r\n            break;\r\n\r\n        case 'MARK_HEAD_NODE':\r\n            newGrid = generateMarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'UNMARK_HEAD_NODE':\r\n            newGrid = generateUnmarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'MARK_BACKTRACK_NODE':\r\n            newGrid = generateMarkBacktrackGrid(action.payload.array, state.grid);\r\n            break;\r\n\r\n        case 'GENERATE_RANDOM_GRID':\r\n            newGrid = generateRandomGrid(state.grid);\r\n            break;\r\n\r\n        case 'SET_START_NODE':\r\n            newGrid = generateNewStartGrid(action.payload.newStart, action.payload.oldStart, state.grid);\r\n            break;\r\n\r\n        case 'SET_END_NODE':\r\n            newGrid = generateNewEndGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'CALCULATE_HCOST':\r\n            newGrid = calculateGridHCost(state.grid, action.payload.row, action.payload.col);\r\n            break;\r\n\r\n        case 'RERUN_ALGORITHM':\r\n            newGrid = generateRerunAlgorithmGrid(state.grid, action.payload.selectedAlgorithm, action.payload.startNode, action.payload.endNode);\r\n            break;\r\n\r\n        case 'REMOVE_START_NODE':\r\n            newGrid = generateRemoveOldStartGrid(state.grid, action.payload.row, action.payload.col);\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    newStatistics = getStatistics(newGrid);\r\n    return { grid: newGrid, statistics: newStatistics };\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        case 'ASTAR':\r\n            return 'ASTAR';\r\n\r\n        case 'GREED':\r\n            return 'GREED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        case 'COMPLETE_ALGORITHM':\r\n            return 'COMPLETE';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialMoveStartEnd = {\r\n    start: { row: gridDetails.START_NODE_ROW, col: gridDetails.START_NODE_COL },\r\n    isStartMoving: false,\r\n    end: { row: gridDetails.FINISH_NODE_ROW, col: gridDetails.FINISH_NODE_COL },\r\n    isEndMoving: false\r\n}\r\n\r\nconst moveStartEndReducer = (state=initialMoveStartEnd, action) => {\r\n    switch(action.type) {\r\n        case 'START_NODE_MOVING':\r\n            return { ...state, isStartMoving: true};\r\n\r\n        case 'START_NODE_NOT_MOVING':\r\n            return { ...state, isStartMoving: false};\r\n\r\n        case 'END_NODE_MOVING':\r\n            return { ...state, isEndMoving: true};\r\n\r\n        case 'END_NODE_NOT_MOVING':\r\n            return { ...state, isEndMoving: false};\r\n\r\n        case 'SET_START_NODE':\r\n            return { ...state, \r\n                    start: {\r\n                            row: action.payload.newStart.row,\r\n                            col: action.payload.newStart.col\r\n                        } \r\n                    }\r\n\r\n        case 'SET_END_NODE':\r\n            return { ...state, \r\n                    end: {\r\n                        row: action.payload.row,\r\n                        col: action.payload.col} \r\n                    }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    board: boardReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer,\r\n    moveStartEnd: moveStartEndReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    mouseIsNotPressed, \r\n    dispatchMultipleActions, \r\n    toggleWallNode,  \r\n    mouseIsPressed,\r\n    startNodeMoving,\r\n    endNodeMoving,\r\n    setStartNode,\r\n    setEndNode,\r\n    calculateHCost,\r\n    rerunAlgorithm ,\r\n    removeStartNode\r\n} from '../actions'\r\n\r\nclass Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onMouseDownHandler = this.onMouseDownHandler.bind(this);\r\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\r\n        this.onMouseUpHandler = this.onMouseUpHandler.bind(this);\r\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\r\n    }\r\n\r\n    onMouseDownHandler() {\r\n        const { \r\n            isFrontier,\r\n            isVisited,\r\n            isFinish,\r\n            isStart,\r\n            dispatchMultipleActions,\r\n            toggleWallNode,\r\n            mouseIsPressed,\r\n            startNodeMoving,\r\n            endNodeMoving,\r\n            algorithmStatus\r\n        } = this.props;\r\n\r\n        const onMouseDownActions = [];\r\n\r\n        if(!isFrontier && !isVisited && !isFinish && !isStart) {\r\n            onMouseDownActions.push(() => toggleWallNode());\r\n        }\r\n\r\n        if(isStart && (algorithmStatus === 'STOPPED' || algorithmStatus === 'COMPLETE')) {\r\n            onMouseDownActions.push(() => startNodeMoving(true));\r\n        }\r\n\r\n        if(isFinish && (algorithmStatus === 'STOPPED' || algorithmStatus === 'COMPLETE')) {\r\n            onMouseDownActions.push(() => endNodeMoving(true));\r\n        }\r\n\r\n        onMouseDownActions.push(() => mouseIsPressed());\r\n        dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    onMouseUpHandler() {\r\n       const {\r\n           mouseIsNotPressed,\r\n           startNodeMoving,\r\n           endNodeMoving,\r\n           dispatchMultipleActions\r\n       } = this.props;\r\n\r\n       const onMouseDownActions = [];\r\n\r\n       onMouseDownActions.push(() => mouseIsNotPressed());\r\n       onMouseDownActions.push(() => startNodeMoving(false));\r\n       onMouseDownActions.push(() => endNodeMoving(false));\r\n       dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    onMouseEnterHandler() {\r\n        const { \r\n            row, col, \r\n            isFrontier,\r\n            isVisited,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            dispatchMultipleActions,\r\n            toggleWallNode,\r\n            isMousePressed,\r\n            isStartMoving,\r\n            isEndMoving,\r\n            setStartNode,\r\n            setEndNode,\r\n            algorithmStatus,\r\n            selectedAlgorithm,\r\n            rerunAlgorithm,\r\n            startNode,\r\n            endNode,\r\n        } = this.props;\r\n\r\n        const onMouseDownActions = []\r\n\r\n        if(!isMousePressed) {\r\n            return;\r\n        }\r\n\r\n        if(isStartMoving) {\r\n            if(isFinish) {\r\n                return;\r\n            }\r\n            onMouseDownActions.push(() => setStartNode({ row, col }, startNode));\r\n\r\n            if(algorithmStatus === 'COMPLETE') {\r\n                onMouseDownActions.push(() => rerunAlgorithm(selectedAlgorithm, { row, col }, endNode));\r\n            }\r\n        }\r\n\r\n        if(isEndMoving) {\r\n            if(isStart) {\r\n                return;\r\n            }\r\n            onMouseDownActions.push(() => setEndNode(row, col));\r\n\r\n            if(algorithmStatus === 'COMPLETE') {\r\n                onMouseDownActions.push(() => rerunAlgorithm(selectedAlgorithm, startNode, { row, col }));\r\n            }\r\n        }\r\n\r\n        if(!isStartMoving && !isEndMoving && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) {\r\n            onMouseDownActions.push(() => toggleWallNode());\r\n        }\r\n\r\n        dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    onMouseLeaveHandler() {\r\n        // const { \r\n        //     row, col,\r\n        //     removeStartNode,\r\n        //     isStartMoving\r\n        // } = this.props;\r\n\r\n        // if(isStartMoving) {\r\n        //     removeStartNode(row, col);\r\n        // }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { \r\n            row, col, \r\n            isStart, isFinish, isWall, isHead, isVisited, isFrontier, isPath, isBacktrack, fCost, \r\n            selectedAlgorithm, \r\n         } = this.props;\r\n\r\n\r\n        const nodeType = isFinish\r\n                        ? 'node-finish'\r\n                        : isStart\r\n                        ? 'node-start'\r\n                        : isPath\r\n                        ? 'node-path'\r\n                        : isWall\r\n                        ? 'node-wall'\r\n                        : isHead\r\n                        ? 'node-head'\r\n                        : isBacktrack\r\n                        ? 'node-backtrack'\r\n                        : isVisited\r\n                        ? 'node-visited'\r\n                        : isFrontier\r\n                        ? 'node-frontier'\r\n                        : ''\r\n\r\n        const value = ((selectedAlgorithm === 'ASTAR' || selectedAlgorithm === 'GREED') && (fCost !== null)) ? fCost : ''\r\n\r\n        return (\r\n            <div \r\n                id={`node-${row}-${col}`}\r\n                className={`node ${nodeType}`}\r\n                onMouseDown={this.onMouseDownHandler}\r\n                onMouseUp={this.onMouseUpHandler}\r\n                onMouseEnter={this.onMouseEnterHandler}\r\n                onMouseLeave={this.onMouseLeaveHandler}>\r\n                {value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.board.grid[ownProps.row][ownProps.col];\r\n    const { moveStartEnd } = state;\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isHead: node.isHead,\r\n        isBacktrack: node.isBacktrack,\r\n        isMousePressed: state.isMousePressed,\r\n        hCost: node.hCost,\r\n        gCost: node.gCost,\r\n        fCost: node.fCost,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isStartMoving: moveStartEnd.isStartMoving,\r\n        isEndMoving: moveStartEnd.isEndMoving,\r\n        startNode: moveStartEnd.start,\r\n        endNode: moveStartEnd.end\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        toggleWallNode: () => dispatch(toggleWallNode(ownProps.row, ownProps.col)),\r\n        mouseIsPressed: () => dispatch(mouseIsPressed()),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions),\r\n        startNodeMoving: (isMoving) => dispatch(startNodeMoving(isMoving)),\r\n        endNodeMoving: (isMoving) => dispatch(endNodeMoving(isMoving)),\r\n        setStartNode: (newStart, oldStart) => dispatch(setStartNode(newStart, oldStart)),\r\n        setEndNode: (row, col) => dispatch(setEndNode(row, col)),\r\n        calculateHCost: (endNode) => dispatch(calculateHCost(endNode)),\r\n        rerunAlgorithm: (selectedAlgorithm, startNode, endNode) => dispatch(rerunAlgorithm(selectedAlgorithm, startNode, endNode)),\r\n        removeStartNode: (row, col) => dispatch(removeStartNode(row, col))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil';\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const { grid } = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' },\r\n    { key: 3, text: 'A* Search', value: 'ASTAR' },\r\n    { key: 4, text: 'Greedy Best-First Search', value: 'GREED' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'ASTAR'\r\n                                                                              ? 'A* Search'\r\n                                                                              : this.props.selectedAlgorithm === 'GREED'\r\n                                                                              ? 'Greedy Best-First Search'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport AStar from '../util/algorithms/AStar';\r\nimport Greedy from '../util/algorithms/Greedy';\r\nimport { isAlgorithmRunning, isAlgorithmStopped } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\nimport { \r\n    showInitialBoard, \r\n    runAlgorithm, \r\n    stopAlgorithm, \r\n    pauseAlgorithm, \r\n    completeAlgorithm, \r\n    toggleFrontierNode, \r\n    toggleVisitedNode, \r\n    togglePathNode, \r\n    resetDataStructure, \r\n    setDataStructure, \r\n    notShowingPath, \r\n    markHeadNode, \r\n    unmarkHeadNode, \r\n    resetBoardWithWalls, \r\n    markBacktrackNodes,\r\n    generateRandomGrid,\r\n    dispatchMultipleActions,\r\n    calculateHCost\r\n} from '../actions';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { \r\n            selectedAlgorithm, \r\n            runAlgorithm, \r\n            pauseAlgorithm,\r\n            completeAlgorithm, \r\n            grid,\r\n            dataStructure,\r\n            toggleVisitedNode, \r\n            toggleFrontierNode, \r\n            togglePathNode,\r\n            setDataStructure,\r\n            isShowingPath,\r\n            markHeadNode,\r\n            unmarkHeadNode,\r\n            algorithmStatus,\r\n            markBacktrackNodes,\r\n            startNode,\r\n            endNode,\r\n            calculateHCost\r\n        } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            calculateHCost(endNode);\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"ASTAR\":\r\n                const aStar = new AStar(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await aStar.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"GREED\":\r\n                const greedy = new Greedy(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await greedy.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            completeAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard(clearWall) {\r\n        const { \r\n            notShowingPath,\r\n            stopAlgorithm,\r\n            resetDataStructure,\r\n            showInitialBoard,\r\n            resetBoardWithWalls,\r\n            dispatchMultipleActions\r\n        } = this.props;\r\n\r\n        const clearBoardActions = [notShowingPath,\r\n                                   stopAlgorithm,\r\n                                   resetDataStructure];\r\n\r\n        if(clearWall) {\r\n            clearBoardActions.push(showInitialBoard);\r\n        } else {\r\n            clearBoardActions.push(resetBoardWithWalls);\r\n        }\r\n\r\n        dispatchMultipleActions(clearBoardActions);\r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath, generateRandomGrid } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') ? \"active item\" : \"item\";\r\n\r\n        const canGenerateRandomGrid = algorithmStatus === 'STOPPED';\r\n\r\n        const randomGridButtonClass = canGenerateRandomGrid ? \"item\" : \"active item\"; \r\n\r\n        let runButtonText = \"Run\";\r\n\r\n        if((algorithmStatus === 'RUNNING' && isShowingPath) || algorithmStatus === 'COMPLETE') {\r\n            runButtonText = \"Complete\";\r\n        }\r\n\r\n        if(algorithmStatus === 'RUNNING' && !isShowingPath) {\r\n            runButtonText = \"Pause\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui five item menu\">\r\n                <a  onClick={canGenerateRandomGrid ? generateRandomGrid : () => {}} className={randomGridButtonClass} >Generate Random Grid</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <a onClick={() => this.clearBoard(false)} className=\"item\">Clear Path</a>\r\n                <a onClick={() => this.clearBoard(true)} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics,\r\n        startNode: state.moveStartEnd.start,\r\n        endNode: state.moveStartEnd.end\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: (endNode) => dispatch(showInitialBoard(endNode)),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath()),\r\n        markHeadNode: (row, col) => dispatch(markHeadNode(row, col)),\r\n        unmarkHeadNode: (row, col) => dispatch(unmarkHeadNode(row, col)),\r\n        resetBoardWithWalls: (endNode) => dispatch(resetBoardWithWalls(endNode)),\r\n        markBacktrackNodes: (array) => dispatch(markBacktrackNodes(array)),\r\n        generateRandomGrid: () => dispatch(generateRandomGrid()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions),\r\n        calculateHCost: (endNode) => dispatch(calculateHCost(endNode))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass InfoPanel extends React.Component {\r\n    render() {\r\n\r\n        const { unvisited,\r\n                visited,\r\n                wall,\r\n                backtrack,\r\n                frontier,\r\n                path } = this.props.statistics;\r\n\r\n        const displayValue = (value) => (value === 0) ? \"\" : `${value} ` \r\n\r\n\r\n        return (\r\n            <div style={{width: \"85%\", margin: \"auto\", marginTop: \"2vh\"}}>\r\n                <div className=\"ui small eight statistics\">\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-start`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">start</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-finish`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">end</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(unvisited)} <div className={`node node-unvisited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>unvisited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(wall)} <div className={`node node-wall`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>wall</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(visited)} <div className={`node node-visited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>visited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(backtrack)} <div className={`node node-backtrack`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>backtrack</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(frontier)} <div className={`node node-frontier`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>frontier</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(path)} <div className={`node node-path`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>path</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(InfoPanel);","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}