{"version":3,"sources":["constants.js","actions/index.js","util/AlgorithmUtil.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","components/Grid.js","util/algorithms/BFS.js","util/algorithms/DFS.js","util/algorithms/AStar.js","util/algorithms/Greedy.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","defaultStatistics","wall","unvisited","visited","backtrack","frontier","path","dispatchMultipleActions","actions","dispatch","i","length","TOTAL_ROW","TOTAL_COL","FINISH_NODE_ROW","FINISH_NODE_COL","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","state","node","neighbours","row","upNode","col","push","rightNode","downNode","leftNode","isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmPaused","isAlgorithmStopped","isShowingPath","showPath","togglePathNode","a","type","finishNode","currentNode","stack","Stack","undefined","previousNode","isEmpty","pop","updatePqueue","pqueue","fCost","newPqueue","MinPriorityQueue","priority","inQueue","frontierNode","dequeue","element","enqueue","START_NODE_ROW","START_NODE_COL","NodeFactory","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","isHead","isBacktrack","isPath","hCost","nodeRow","nodeCol","targetRow","targetCol","Math","abs","gCost","generateInitalGrid","grid","r","currentRow","c","generateToggleWallGrid","currentGrid","newGrid","slice","newNode","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","generateMarkHeadGrid","generateUnmarkHeadGrid","generateMarkBacktrackGrid","array","generateNodeKey","toString","getStatistics","stats","generateRandomGrid","random","combineReducers","action","selectedAlgorithm","board","statistics","payload","dataStructure","isMousePressed","connect","ownProps","mouseIsNotPressed","onMouseDown","nodeType","value","onMouseDownActions","toggleWallNode","id","className","onMouseUp","onMouseEnter","Grid","this","props","map","rowIndex","key","colIndex","React","Component","BFS","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","startNode","neighbour","DFS","markHeadNode","unmarkHeadNode","markBacktrackNodes","stacks","unvisitedStack","visitedStack","wasBacktracking","removeFromStack","filter","backtrackNodes","visitedNode","contains","peek","target","newStack","tempStack","current","AStar","tempG","tempF","Greedy","options","text","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","bind","clearBoard","runAlgorithm","pauseAlgorithm","completeAlgorithm","bfs","run","dfs","aStar","greedy","clearWall","notShowingPath","stopAlgorithm","resetDataStructure","showInitialBoard","resetBoardWithWalls","clearBoardActions","runButtonClass","canGenerateRandomGrid","randomGridButtonClass","runButtonText","onClick","InfoPanel","displayValue","style","width","margin","marginTop","class","border","borderRadius","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.63a554de.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}\r\n\r\nexport const defaultStatistics = {\r\n    wall: 0,\r\n    unvisited: gridDetails.TOTAL_ROW * gridDetails.TOTAL_COL - 2,\r\n    visited: 0,\r\n    backtrack: 0,\r\n    frontier: 0,\r\n    path: 0\r\n}\r\n\r\nexport const wallRatio = 0.3;","export const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const dispatchMultipleActions = (actions, dispatch) => {\r\n    for(let i = 0; i < actions.length; i++) {\r\n        dispatch(actions[i]());\r\n    }\r\n}\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD'};\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS'};\r\n}\r\n\r\nexport const generateRandomGrid = () => {\r\n    return { type: 'GENERATE_RANDOM_GRID' };\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const completeAlgorithm = () => {\r\n    return { type: 'COMPLETE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n\r\nexport const markHeadNode = (row, col) => {\r\n    return {\r\n        type: 'MARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const unmarkHeadNode = (row, col) => {\r\n    return {\r\n        type: 'UNMARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const markBacktrackNodes = (array) => {\r\n    return  {\r\n        type: 'MARK_BACKTRACK_NODE',\r\n        payload: { array }\r\n    }\r\n}\r\n","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(20);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}\r\n\r\nexport const calculateMahattanDistance = (nodeRow, nodeCol, targetRow, targetCol) => {\r\n    return Math.abs(nodeRow - targetRow) + Math.abs(nodeCol - targetCol);\r\n}\r\n\r\nexport const updatePqueue = (pqueue, node) => {\r\n    const { row, col, fCost } = node;\r\n    const newPqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n    let inQueue = false;\r\n\r\n    while(!pqueue.isEmpty()) {\r\n        const frontierNode = pqueue.dequeue().element;\r\n\r\n        if(frontierNode.row === row && frontierNode.col === col) {\r\n            inQueue = true;\r\n            if(frontierNode.fCost <= fCost) {\r\n                newPqueue.enqueue(frontierNode);\r\n            } else {    \r\n                newPqueue.enqueue(node);\r\n            }\r\n        } else {\r\n            newPqueue.enqueue(frontierNode);\r\n        }\r\n    }\r\n\r\n    if(!inQueue) {\r\n        newPqueue.enqueue(node);\r\n    }\r\n\r\n    return newPqueue;\r\n}","import { gridDetails, defaultStatistics, wallRatio } from '../constants';\r\nimport { calculateMahattanDistance } from './AlgorithmUtil';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        isHead: false,\r\n        isBacktrack: false,\r\n        previousNode: null,\r\n        isPath: false,\r\n        hCost: calculateMahattanDistance(row, col, FINISH_NODE_ROW, FINISH_NODE_COL),\r\n        gCost: null,\r\n        fCost: null\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = generateInitalGrid();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const currentNode = currentGrid[r][c];\r\n            if(!currentNode.isFinish && !currentNode.isStart) {  \r\n                newGrid[r][c].isWall = currentNode.isWall;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateUnmarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkBacktrackGrid(array, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const { row, col } = array[i];\r\n        const node = newGrid[row][col];\r\n\r\n        const newNode = {\r\n            ...node,\r\n            isBacktrack: true\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}\r\n\r\nexport function getStatistics(grid) {\r\n    const stats = { ...defaultStatistics };\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = grid[r][c];\r\n\r\n            if(node.isWall) {\r\n                stats.wall++;\r\n            }\r\n\r\n            if(node.isVisited) {\r\n                stats.visited++;\r\n            }\r\n\r\n            if(node.isBacktrack) {\r\n                stats.backtrack++;\r\n            }\r\n\r\n            if(node.isFrontier) {\r\n                stats.frontier++;\r\n            }\r\n            \r\n            if(node.isPath) {\r\n                stats.path++;\r\n            }\r\n        }\r\n    }\r\n\r\n    stats.unvisited = (TOTAL_ROW * TOTAL_COL - 2) - stats.wall - stats.visited - stats.frontier;\r\n\r\n    return stats;\r\n}\r\n\r\nfunction setAsWall() {\r\n    return Math.random() < wallRatio;\r\n}\r\n\r\nexport function generateRandomGrid() {\r\n    const newGrid = generateInitalGrid();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            if(!node.isStart && !node.isFinish) {\r\n                node.isWall = setAsWall();\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}","import { combineReducers } from 'redux';\r\nimport { defaultStatistics } from '../constants';\r\nimport { generateInitalGrid,\r\n         generateToggleWallGrid, \r\n         generateToggleFrontierGrid, \r\n         generateMarkVisitedGrid, \r\n         generateMarkPathGrid, \r\n         generateGridWithWalls, \r\n         generateMarkHeadGrid, \r\n         generateUnmarkHeadGrid, \r\n         generateMarkBacktrackGrid, \r\n         getStatistics,\r\n         generateRandomGrid } from '../util/GridGenerationUtil';\r\n\r\nconst boardReducer = (state={ grid: generateInitalGrid(), statistics: defaultStatistics }, action) => {\r\n    let newGrid = state.grid;\r\n    let newStatistics = state.statistics;\r\n\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            newGrid = generateToggleWallGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            newGrid = generateToggleFrontierGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n            \r\n        case 'TOGGLE_VISITED_NODE':\r\n            newGrid = generateMarkVisitedGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            newGrid = generateMarkPathGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            newGrid = generateInitalGrid();\r\n            break;\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            newGrid = generateGridWithWalls(state.grid);\r\n            break;\r\n\r\n        case 'MARK_HEAD_NODE':\r\n            newGrid = generateMarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'UNMARK_HEAD_NODE':\r\n            newGrid = generateUnmarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'MARK_BACKTRACK_NODE':\r\n            newGrid = generateMarkBacktrackGrid(action.payload.array, state.grid);\r\n            break;\r\n\r\n        case 'GENERATE_RANDOM_GRID':\r\n            newGrid = generateRandomGrid();\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    newStatistics = getStatistics(newGrid);\r\n    return { grid: newGrid, statistics: newStatistics };\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        case 'ASTAR':\r\n            return 'ASTAR';\r\n\r\n        case 'GREED':\r\n            return 'GREED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        case 'COMPLETE_ALGORITHM':\r\n            return 'COMPLETE';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    board: boardReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, \r\n         dispatchMultipleActions, \r\n         toggleWallNode,  \r\n         mouseIsPressed } from '../actions'\r\n\r\nconst Node = ({ row, col, \r\n                isStart, isFinish, isWall, isHead, isVisited, isFrontier, isPath, isBacktrack, \r\n                isMousePressed, onMouseDown, mouseIsNotPressed, \r\n                fCost, \r\n                selectedAlgorithm, \r\n                grid,\r\n                dispatchMultipleActions }) => {\r\n    const nodeType = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isPath\r\n        ? 'node-path'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : isHead\r\n        ? 'node-head'\r\n        : isBacktrack\r\n        ? 'node-backtrack'\r\n        : isVisited\r\n        ? 'node-visited'\r\n        : isFrontier\r\n        ? 'node-frontier'\r\n        : ''\r\n\r\n    const value = ((selectedAlgorithm === 'ASTAR' || selectedAlgorithm === 'GREED') && (fCost !== null)) ? fCost : ''\r\n\r\n    const onMouseDownActions = [() => toggleWallNode(row, col), \r\n                                () => mouseIsPressed()]\r\n\r\n    return <div \r\n            id={`node-${row}-${col}`}\r\n            className={`node ${nodeType}`}\r\n            onMouseDown={(!isFrontier && !isVisited && !isFinish && !isStart) ? () => dispatchMultipleActions(onMouseDownActions) : () => {}}\r\n            onMouseUp={mouseIsNotPressed}\r\n            onMouseEnter={(isMousePressed && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) ? () => dispatchMultipleActions(onMouseDownActions) : () => {}}>{value}</div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.board.grid[ownProps.row][ownProps.col];\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isHead: node.isHead,\r\n        isBacktrack: node.isBacktrack,\r\n        isMousePressed: state.isMousePressed,\r\n        hCost: node.hCost,\r\n        gCost: node.gCost,\r\n        fCost: node.fCost,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        grid: state.board.grid\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil';\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const { grid } = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\n\r\nimport Queue from 'queue-fifo';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n  \r\nexport default class BFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class DFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.markHeadNode = markHeadNode;\r\n        this.unmarkHeadNode = unmarkHeadNode;\r\n        this.markBacktrackNodes = markBacktrackNodes;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, stacks) {\r\n        let unvisitedStack = null;\r\n        let visitedStack = null;\r\n        let wasBacktracking = null;\r\n\r\n        if(stacks === null) {\r\n            unvisitedStack = new Stack();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            unvisitedStack.push(startNode);\r\n\r\n            visitedStack = new Stack();\r\n            wasBacktracking = false;\r\n        } else {\r\n            unvisitedStack = stacks.unvisitedStack;\r\n            visitedStack = stacks.visitedStack;\r\n            wasBacktracking = stacks.wasBacktracking;\r\n        }\r\n\r\n        while(!unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            if(wasBacktracking) {\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n                await sleep(20);\r\n                continue;\r\n            }\r\n\r\n\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n            this.markHeadNode(currentNode.row, currentNode.col);\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n                this.unmarkHeadNode(row, col);\r\n            }\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n\r\n            if(validNeighbours.length === 0) {\r\n                currentNode.isHead = false;\r\n                this.unmarkHeadNode(currentNode.row, currentNode.col);\r\n                await sleep(20);\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure({ unvisitedStack: unvisitedStack, visitedStack: visitedStack, wasBacktracking: wasBacktracking });\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    async backtrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                visitedStack.push(visitedNode);\r\n                this.markBacktrackNodes(backtrackNodes);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n\r\n    contains(neighbours, target) {\r\n        for(let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            if(neighbour.row === target.row && neighbour.col === target.col) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    removeFromStack(stack, target) {\r\n        const newStack = new Stack();\r\n        const tempStack = new Stack();\r\n\r\n        while(!stack.isEmpty()) {\r\n            const current = stack.pop();\r\n            if(current.row === target.row && current.col === target.col) {\r\n                continue;\r\n            }\r\n\r\n            tempStack.push(current);\r\n        }\r\n\r\n        while(!tempStack.isEmpty()) {\r\n            newStack.push(tempStack.pop());\r\n        }\r\n\r\n        return newStack;\r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\n\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class AStar {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            startNode.gCost = 0;\r\n            startNode.fCost = startNode.gCost + startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    const tempG = currentNode.gCost + 1;\r\n                    const tempF = tempG + neighbour.hCost;\r\n                    if(neighbour.gCost !== null) {\r\n                        if(tempF < neighbour.fCost) {\r\n                            neighbour.gCost = tempG;\r\n                            neighbour.fCost = tempF;\r\n                            neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                            pqueue = updatePqueue(pqueue, neighbour);\r\n                        } \r\n                    } else {\r\n                        neighbour.gCost = tempG;\r\n                        neighbour.fCost = tempF;\r\n                        pqueue.enqueue(neighbour);\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    }\r\n\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\n\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class Greedy {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            startNode.fCost = startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    if(!neighbour.isFrontier) {\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                        this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n\r\n                        neighbour.fCost = neighbour.hCost;\r\n                        pqueue = updatePqueue(pqueue, neighbour);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' },\r\n    { key: 3, text: 'A* Search', value: 'ASTAR' },\r\n    { key: 4, text: 'Greedy Best-First Search', value: 'GREED' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'ASTAR'\r\n                                                                              ? 'A* Search'\r\n                                                                              : this.props.selectedAlgorithm === 'GREED'\r\n                                                                              ? 'Greedy Best-First Search'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport AStar from '../util/algorithms/AStar';\r\nimport Greedy from '../util/algorithms/Greedy';\r\nimport { isAlgorithmRunning } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\nimport { showInitialBoard, \r\n        runAlgorithm, \r\n        stopAlgorithm, \r\n        pauseAlgorithm, \r\n        completeAlgorithm, \r\n        toggleFrontierNode, \r\n        toggleVisitedNode, \r\n        togglePathNode, \r\n        resetDataStructure, \r\n        setDataStructure, \r\n        notShowingPath, \r\n        markHeadNode, \r\n        unmarkHeadNode, \r\n        resetBoardWithWalls, \r\n        markBacktrackNodes,\r\n        generateRandomGrid,\r\n        dispatchMultipleActions } from '../actions';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { selectedAlgorithm, \r\n                runAlgorithm, \r\n                pauseAlgorithm,\r\n                completeAlgorithm, \r\n                grid,\r\n                dataStructure,\r\n                toggleVisitedNode, \r\n                toggleFrontierNode, \r\n                togglePathNode,\r\n                setDataStructure,\r\n                isShowingPath,\r\n                markHeadNode,\r\n                unmarkHeadNode,\r\n                algorithmStatus,\r\n                markBacktrackNodes } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"ASTAR\":\r\n                const aStar = new AStar(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await aStar.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"GREED\":\r\n                const greedy = new Greedy(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await greedy.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            completeAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard(clearWall) {\r\n        const { notShowingPath,\r\n                stopAlgorithm,\r\n                resetDataStructure,\r\n                showInitialBoard,\r\n                resetBoardWithWalls,\r\n                dispatchMultipleActions} = this.props;\r\n\r\n        const clearBoardActions = [notShowingPath,\r\n                                   stopAlgorithm,\r\n                                   resetDataStructure];\r\n\r\n        if(clearWall) {\r\n            clearBoardActions.push(showInitialBoard);\r\n        } else {\r\n            clearBoardActions.push(resetBoardWithWalls);\r\n        }\r\n\r\n        dispatchMultipleActions(clearBoardActions);\r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath, generateRandomGrid } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') ? \"active item\" : \"item\";\r\n\r\n        const canGenerateRandomGrid = algorithmStatus === 'STOPPED';\r\n\r\n        const randomGridButtonClass = canGenerateRandomGrid ? \"item\" : \"active item\"; \r\n\r\n        let runButtonText = \"Run\";\r\n\r\n        if((algorithmStatus === 'RUNNING' && isShowingPath) || algorithmStatus === 'COMPLETE') {\r\n            runButtonText = \"Complete\";\r\n        }\r\n\r\n        if(algorithmStatus === 'RUNNING' && !isShowingPath) {\r\n            runButtonText = \"Pause\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui five item menu\">\r\n                <a  onClick={canGenerateRandomGrid ? () => generateRandomGrid() : () => {}} className={randomGridButtonClass} >Generate Random Grid</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <a onClick={() => this.clearBoard(false)} className=\"item\">Clear Path</a>\r\n                <a onClick={() => this.clearBoard(true)} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: () => dispatch(showInitialBoard()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath()),\r\n        markHeadNode: (row, col) => dispatch(markHeadNode(row, col)),\r\n        unmarkHeadNode: (row, col) => dispatch(unmarkHeadNode(row, col)),\r\n        resetBoardWithWalls: () => dispatch(resetBoardWithWalls()),\r\n        markBacktrackNodes: (array) => dispatch(markBacktrackNodes(array)),\r\n        generateRandomGrid: () => dispatch(generateRandomGrid()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass InfoPanel extends React.Component {\r\n    render() {\r\n\r\n        const { unvisited,\r\n                visited,\r\n                wall,\r\n                backtrack,\r\n                frontier,\r\n                path } = this.props.statistics;\r\n\r\n        const displayValue = (value) => (value === 0) ? \"\" : `${value} ` \r\n\r\n\r\n        return (\r\n            <div style={{width: \"85%\", margin: \"auto\", marginTop: \"2vh\"}}>\r\n                <div className=\"ui small eight statistics\">\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-start`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">start</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-finish`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">end</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(unvisited)} <div className={`node node-unvisited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>unvisited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(wall)} <div className={`node node-wall`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>wall</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(visited)} <div className={`node node-visited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>visited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(backtrack)} <div className={`node node-backtrack`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>backtrack</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(frontier)} <div className={`node node-frontier`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>frontier</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(path)} <div className={`node node-path`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>path</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(InfoPanel);","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}