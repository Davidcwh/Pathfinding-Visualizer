{"version":3,"sources":["constants.js","actions/index.js","util/AlgorithmUtil.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","components/Grid.js","util/algorithms/BFS.js","util/algorithms/DFS.js","util/algorithms/AStar.js","util/algorithms/Greedy.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","defaultStatistics","wall","unvisited","visited","backtrack","frontier","path","dispatchMultipleActions","actions","i","length","TOTAL_ROW","TOTAL_COL","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","state","node","neighbours","row","upNode","col","push","rightNode","downNode","leftNode","isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmPaused","isAlgorithmStopped","isShowingPath","showPath","togglePathNode","endRow","endCol","a","dispatch","type","finishNode","currentNode","stack","Stack","undefined","previousNode","isEmpty","pop","updatePqueue","pqueue","fCost","newPqueue","MinPriorityQueue","priority","inQueue","frontierNode","dequeue","element","enqueue","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","NodeFactory","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","isHead","isBacktrack","isPath","hCost","gCost","generateInitalGrid","grid","r","currentRow","c","generatePlainGrid","currentGrid","newGrid","slice","newNode","generateToggleWallGrid","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","generateMarkHeadGrid","generateUnmarkHeadGrid","generateMarkBacktrackGrid","array","generateNewStartGrid","generateNewEndGrid","generateNodeKey","toString","getStatistics","stats","leftover","generateRandomGrid","Math","random","calculateGridHCost","nodeRow","nodeCol","targetRow","targetCol","abs","initialMoveStartEnd","start","isStartMoving","end","isEndMoving","combineReducers","action","selectedAlgorithm","board","statistics","payload","dataStructure","isMousePressed","moveStartEnd","Node","props","onMouseDownHandler","bind","onMouseEnterHandler","onMouseUpHandler","this","toggleWallNode","mouseIsPressed","startNodeMoving","endNodeMoving","onMouseDownActions","mouseIsNotPressed","setStartNode","setEndNode","nodeType","value","id","className","onMouseDown","onMouseUp","onMouseEnter","React","Component","connect","ownProps","isMoving","Grid","map","rowIndex","key","colIndex","BFS","startNode","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","neighbour","DFS","markHeadNode","unmarkHeadNode","markBacktrackNodes","stacks","unvisitedStack","visitedStack","wasBacktracking","removeFromStack","filter","backtrackNodes","visitedNode","contains","peek","target","newStack","tempStack","current","AStar","tempG","tempF","Greedy","options","text","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","clearBoard","runAlgorithm","pauseAlgorithm","completeAlgorithm","endNode","calculateHCost","bfs","run","dfs","aStar","greedy","clearWall","notShowingPath","stopAlgorithm","resetDataStructure","showInitialBoard","resetBoardWithWalls","clearBoardActions","runButtonClass","canGenerateRandomGrid","randomGridButtonClass","runButtonText","onClick","InfoPanel","displayValue","style","width","margin","marginTop","class","border","borderRadius","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a14afc94.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}\r\n\r\nexport const defaultStatistics = {\r\n    wall: 0,\r\n    unvisited: gridDetails.TOTAL_ROW * gridDetails.TOTAL_COL - 2,\r\n    visited: 0,\r\n    backtrack: 0,\r\n    frontier: 0,\r\n    path: 0\r\n}\r\n\r\nexport const wallRatio = 0.3;","export const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const dispatchMultipleActions = (actions) => {\r\n    for(let i = 0; i < actions.length; i++) {\r\n        actions[i]();\r\n    }\r\n}\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD' };\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS' };\r\n}\r\n\r\nexport const generateRandomGrid = (endNde) => {\r\n    return { type: 'GENERATE_RANDOM_GRID' };\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const completeAlgorithm = () => {\r\n    return { type: 'COMPLETE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n\r\nexport const markHeadNode = (row, col) => {\r\n    return {\r\n        type: 'MARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const unmarkHeadNode = (row, col) => {\r\n    return {\r\n        type: 'UNMARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const markBacktrackNodes = (array) => {\r\n    return  {\r\n        type: 'MARK_BACKTRACK_NODE',\r\n        payload: { array }\r\n    }\r\n}\r\n\r\nexport const startNodeMoving = (isMoving) => {\r\n    return { type: (isMoving ? 'START_NODE_MOVING' : 'START_NODE_NOT_MOVING') };\r\n}\r\n\r\nexport const startNodeNotMoving = () => {\r\n    return { type: 'START_NODE_NOT_MOVING' };\r\n}\r\n\r\nexport const endNodeMoving = (isMoving) => {\r\n    return { type: (isMoving? 'END_NODE_MOVING' : 'END_NODE_NOT_MOVING') };\r\n}\r\n\r\nexport const endNodeNotMoving = () => {\r\n    return { type: 'END_NODE_NOT_MOVING' };\r\n}\r\n\r\nexport const setStartNode = (row, col) => {\r\n    return {\r\n        type: 'SET_START_NODE',\r\n        payload: { row, col }\r\n    }\r\n}\r\n\r\nexport const setEndNode = (row, col) => {\r\n    return {\r\n        type: 'SET_END_NODE',\r\n        payload: { row, col }\r\n    }\r\n}\r\n\r\nexport const calculateHCost = (endNode) => {\r\n    return { \r\n        type: 'CALCULATE_HCOST',\r\n        payload: {\r\n            row: endNode.row,\r\n            col: endNode.col\r\n        }\r\n    };\r\n}","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode, endRow, endCol) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[endRow][endCol];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(20);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}\r\n\r\nexport const calculateMahattanDistance = (nodeRow, nodeCol, targetRow, targetCol) => {\r\n    return Math.abs(nodeRow - targetRow) + Math.abs(nodeCol - targetCol);\r\n}\r\n\r\nexport const updatePqueue = (pqueue, node) => {\r\n    const { row, col, fCost } = node;\r\n    const newPqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n    let inQueue = false;\r\n\r\n    while(!pqueue.isEmpty()) {\r\n        const frontierNode = pqueue.dequeue().element;\r\n\r\n        if(frontierNode.row === row && frontierNode.col === col) {\r\n            inQueue = true;\r\n            if(frontierNode.fCost <= fCost) {\r\n                newPqueue.enqueue(frontierNode);\r\n            } else {    \r\n                newPqueue.enqueue(node);\r\n            }\r\n        } else {\r\n            newPqueue.enqueue(frontierNode);\r\n        }\r\n    }\r\n\r\n    if(!inQueue) {\r\n        newPqueue.enqueue(node);\r\n    }\r\n\r\n    return newPqueue;\r\n}","import { gridDetails, defaultStatistics, wallRatio } from '../constants';\r\nimport { calculateMahattanDistance } from './AlgorithmUtil';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        isHead: false,\r\n        isBacktrack: false,\r\n        previousNode: null,\r\n        isPath: false,\r\n        hCost: null,\r\n        gCost: null,\r\n        fCost: null\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generatePlainGrid(currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            const newNode = NodeFactory(r, c);\r\n\r\n            newNode.isStart = node.isStart;\r\n            newNode.isFinish = node.isFinish;\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            const newNode = NodeFactory(r, c);\r\n\r\n            newNode.isStart = node.isStart;\r\n            newNode.isFinish = node.isFinish;\r\n            newNode.isWall = node.isWall;\r\n            newNode.hCost = null;\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateUnmarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkBacktrackGrid(array, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const { row, col } = array[i];\r\n        const node = newGrid[row][col];\r\n\r\n        const newNode = {\r\n            ...node,\r\n            isBacktrack: true\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNewStartGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            let isStart = r === row && c === col;\r\n\r\n            const newNode = {\r\n                ...node,\r\n                isStart: isStart\r\n            }\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateNewEndGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n\r\n            let isFinish = r === row && c === col;\r\n\r\n            const newNode = {\r\n                ...node,\r\n                isFinish: isFinish\r\n            }\r\n\r\n            newGrid[r][c] = newNode;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}\r\n\r\nexport function getStatistics(grid) {\r\n    const stats = { ...defaultStatistics };\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = grid[r][c];\r\n\r\n            if(node.isWall && !node.isFinish && !node.isStart) {\r\n                stats.wall++;\r\n            }\r\n\r\n            if(node.isVisited) {\r\n                stats.visited++;\r\n            }\r\n\r\n            if(node.isBacktrack) {\r\n                stats.backtrack++;\r\n            }\r\n\r\n            if(node.isFrontier) {\r\n                stats.frontier++;\r\n            }\r\n            \r\n            if(node.isPath) {\r\n                stats.path++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const leftover = (TOTAL_ROW * TOTAL_COL - 2) - stats.wall - stats.visited - stats.frontier;\r\n    stats.unvisited = leftover <= 0 ? 0 : leftover;\r\n\r\n    return stats;\r\n}\r\n\r\nfunction setAsWall() {\r\n    return Math.random() < wallRatio;\r\n}\r\n\r\nexport function generateRandomGrid(currentGrid) {\r\n    const newGrid = generatePlainGrid(currentGrid);\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n            node.hCost = null;\r\n\r\n            if(!node.isStart && !node.isFinish) {\r\n                node.isWall = setAsWall();\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function calculateGridHCost(currentGrid, endRow, endCol) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = newGrid[r][c];\r\n            node.hCost = calculateMahattanDistance(r, c, endRow, endCol);\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}","import { combineReducers } from 'redux';\r\nimport { defaultStatistics } from '../constants';\r\nimport { gridDetails } from '../constants';\r\nimport { generateInitalGrid,\r\n         generateToggleWallGrid, \r\n         generateToggleFrontierGrid, \r\n         generateMarkVisitedGrid, \r\n         generateMarkPathGrid, \r\n         generateGridWithWalls, \r\n         generateMarkHeadGrid, \r\n         generateUnmarkHeadGrid, \r\n         generateMarkBacktrackGrid, \r\n         getStatistics,\r\n         generateRandomGrid,\r\n         generatePlainGrid,\r\n         generateNewStartGrid,\r\n         generateNewEndGrid,\r\n         calculateGridHCost } from '../util/GridGenerationUtil';\r\n\r\nconst boardReducer = (state={ grid: generateInitalGrid(), statistics: defaultStatistics }, action) => {\r\n    let newGrid = state.grid;\r\n    let newStatistics = state.statistics;\r\n\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            newGrid = generateToggleWallGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            newGrid = generateToggleFrontierGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n            \r\n        case 'TOGGLE_VISITED_NODE':\r\n            newGrid = generateMarkVisitedGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            newGrid = generateMarkPathGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            newGrid = generatePlainGrid(state.grid);\r\n            break;\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            newGrid = generateGridWithWalls(state.grid);\r\n            break;\r\n\r\n        case 'MARK_HEAD_NODE':\r\n            newGrid = generateMarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'UNMARK_HEAD_NODE':\r\n            newGrid = generateUnmarkHeadGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'MARK_BACKTRACK_NODE':\r\n            newGrid = generateMarkBacktrackGrid(action.payload.array, state.grid);\r\n            break;\r\n\r\n        case 'GENERATE_RANDOM_GRID':\r\n            newGrid = generateRandomGrid(state.grid);\r\n            break;\r\n\r\n        case 'SET_START_NODE':\r\n            newGrid = generateNewStartGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'SET_END_NODE':\r\n            newGrid = generateNewEndGrid(action.payload.row, action.payload.col, state.grid);\r\n            break;\r\n\r\n        case 'CALCULATE_HCOST':\r\n            newGrid = calculateGridHCost(state.grid, action.payload.row, action.payload.col);\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    newStatistics = getStatistics(newGrid);\r\n    return { grid: newGrid, statistics: newStatistics };\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        case 'ASTAR':\r\n            return 'ASTAR';\r\n\r\n        case 'GREED':\r\n            return 'GREED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        case 'COMPLETE_ALGORITHM':\r\n            return 'COMPLETE';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialMoveStartEnd = {\r\n    start: { row: gridDetails.START_NODE_ROW, col: gridDetails.START_NODE_COL },\r\n    isStartMoving: false,\r\n    end: { row: gridDetails.FINISH_NODE_ROW, col: gridDetails.FINISH_NODE_COL },\r\n    isEndMoving: false\r\n}\r\n\r\nconst moveStartEndReducer = (state=initialMoveStartEnd, action) => {\r\n    switch(action.type) {\r\n        case 'START_NODE_MOVING':\r\n            return { ...state, isStartMoving: true};\r\n\r\n        case 'START_NODE_NOT_MOVING':\r\n            return { ...state, isStartMoving: false};\r\n\r\n        case 'END_NODE_MOVING':\r\n            return { ...state, isEndMoving: true};\r\n\r\n        case 'END_NODE_NOT_MOVING':\r\n            return { ...state, isEndMoving: false};\r\n\r\n        case 'SET_START_NODE':\r\n            return { ...state, \r\n                    start: {\r\n                        row: action.payload.row,\r\n                        col: action.payload.col} \r\n                    }\r\n\r\n        case 'SET_END_NODE':\r\n            return { ...state, \r\n                    end: {\r\n                        row: action.payload.row,\r\n                        col: action.payload.col} \r\n                    }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    board: boardReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer,\r\n    moveStartEnd: moveStartEndReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, \r\n         dispatchMultipleActions, \r\n         toggleWallNode,  \r\n         mouseIsPressed,\r\n         startNodeMoving,\r\n         endNodeMoving,\r\n         setStartNode,\r\n         setEndNode } from '../actions'\r\n\r\nclass Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onMouseDownHandler = this.onMouseDownHandler.bind(this);\r\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\r\n        this.onMouseUpHandler = this.onMouseUpHandler.bind(this);\r\n    }\r\n\r\n    onMouseDownHandler() {\r\n        const { \r\n            isFrontier,\r\n            isVisited,\r\n            isFinish,\r\n            isStart,\r\n            dispatchMultipleActions,\r\n            toggleWallNode,\r\n            mouseIsPressed,\r\n            startNodeMoving,\r\n            endNodeMoving,\r\n            algorithmStatus\r\n        } = this.props;\r\n\r\n        const onMouseDownActions = [];\r\n\r\n        if(!isFrontier && !isVisited && !isFinish && !isStart) {\r\n            onMouseDownActions.push(() => toggleWallNode());\r\n        }\r\n\r\n        if(isStart && algorithmStatus === 'STOPPED') {\r\n            onMouseDownActions.push(() => startNodeMoving(true));\r\n        }\r\n\r\n        if(isFinish && algorithmStatus === 'STOPPED') {\r\n            onMouseDownActions.push(() => endNodeMoving(true));\r\n        }\r\n\r\n        onMouseDownActions.push(() => mouseIsPressed());\r\n        dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    onMouseUpHandler() {\r\n       const {\r\n           mouseIsNotPressed,\r\n           startNodeMoving,\r\n           endNodeMoving,\r\n           dispatchMultipleActions\r\n       } = this.props;\r\n\r\n       const onMouseDownActions = [];\r\n\r\n       onMouseDownActions.push(() => mouseIsNotPressed());\r\n       onMouseDownActions.push(() => startNodeMoving(false));\r\n       onMouseDownActions.push(() => endNodeMoving(false));\r\n       dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    onMouseEnterHandler() {\r\n        const { \r\n            row, col, \r\n            isFrontier,\r\n            isVisited,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            dispatchMultipleActions,\r\n            toggleWallNode,\r\n            isMousePressed,\r\n            isStartMoving,\r\n            isEndMoving,\r\n            setStartNode,\r\n            setEndNode,\r\n        } = this.props;\r\n\r\n        const onMouseDownActions = []\r\n\r\n        if(!isMousePressed) {\r\n            return;\r\n        }\r\n\r\n        if(isStartMoving) {\r\n            if(isFinish) {\r\n                return;\r\n            }\r\n            onMouseDownActions.push(() => setStartNode(row, col));\r\n        }\r\n\r\n        if(isEndMoving) {\r\n            if(isStart) {\r\n                return;\r\n            }\r\n            onMouseDownActions.push(() => setEndNode(row, col));\r\n        }\r\n\r\n        if(!isStartMoving && !isEndMoving && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) {\r\n            onMouseDownActions.push(() => toggleWallNode());\r\n        }\r\n\r\n        dispatchMultipleActions(onMouseDownActions);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { \r\n            row, col, \r\n            isStart, isFinish, isWall, isHead, isVisited, isFrontier, isPath, isBacktrack, fCost, \r\n            selectedAlgorithm, \r\n         } = this.props;\r\n\r\n\r\n        const nodeType = isFinish\r\n                        ? 'node-finish'\r\n                        : isStart\r\n                        ? 'node-start'\r\n                        : isPath\r\n                        ? 'node-path'\r\n                        : isWall\r\n                        ? 'node-wall'\r\n                        : isHead\r\n                        ? 'node-head'\r\n                        : isBacktrack\r\n                        ? 'node-backtrack'\r\n                        : isVisited\r\n                        ? 'node-visited'\r\n                        : isFrontier\r\n                        ? 'node-frontier'\r\n                        : ''\r\n\r\n        const value = ((selectedAlgorithm === 'ASTAR' || selectedAlgorithm === 'GREED') && (fCost !== null)) ? fCost : ''\r\n\r\n        return (\r\n            <div \r\n                id={`node-${row}-${col}`}\r\n                className={`node ${nodeType}`}\r\n                onMouseDown={this.onMouseDownHandler}\r\n                onMouseUp={this.onMouseUpHandler}\r\n                onMouseEnter={this.onMouseEnterHandler}>\r\n                {value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.board.grid[ownProps.row][ownProps.col];\r\n    const { moveStartEnd } = state;\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isHead: node.isHead,\r\n        isBacktrack: node.isBacktrack,\r\n        isMousePressed: state.isMousePressed,\r\n        hCost: node.hCost,\r\n        gCost: node.gCost,\r\n        fCost: node.fCost,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isStartMoving: moveStartEnd.isStartMoving,\r\n        isEndMoving: moveStartEnd.isEndMoving\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        toggleWallNode: () => dispatch(toggleWallNode(ownProps.row, ownProps.col)),\r\n        mouseIsPressed: () => dispatch(mouseIsPressed()),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions),\r\n        startNodeMoving: (isMoving) => dispatch(startNodeMoving(isMoving)),\r\n        endNodeMoving: (isMoving) => dispatch(endNodeMoving(isMoving)),\r\n        setStartNode: (row, col) => dispatch(setStartNode(row, col)),\r\n        setEndNode: (row, col) => dispatch(setEndNode(row, col))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil';\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const { grid } = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Queue from 'queue-fifo';\r\n  \r\nexport default class BFS {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                // if(neighbour.isFinish) {\r\n                //     await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                //     return;\r\n                // }\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nexport default class DFS {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.markHeadNode = markHeadNode;\r\n        this.unmarkHeadNode = unmarkHeadNode;\r\n        this.markBacktrackNodes = markBacktrackNodes;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, stacks) {\r\n        let unvisitedStack = null;\r\n        let visitedStack = null;\r\n        let wasBacktracking = null;\r\n\r\n        if(stacks === null) {\r\n            unvisitedStack = new Stack();\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            unvisitedStack.push(startNode);\r\n\r\n            visitedStack = new Stack();\r\n            wasBacktracking = false;\r\n        } else {\r\n            unvisitedStack = stacks.unvisitedStack;\r\n            visitedStack = stacks.visitedStack;\r\n            wasBacktracking = stacks.wasBacktracking;\r\n        }\r\n\r\n        while(!unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            if(wasBacktracking) {\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n                await sleep(20);\r\n                continue;\r\n            }\r\n\r\n\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n            this.markHeadNode(currentNode.row, currentNode.col);\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n                this.unmarkHeadNode(row, col);\r\n            }\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) || neighbour.isFinish) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n\r\n            if(validNeighbours.length === 0) {\r\n                currentNode.isHead = false;\r\n                this.unmarkHeadNode(currentNode.row, currentNode.col);\r\n                await sleep(20);\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure({ unvisitedStack: unvisitedStack, visitedStack: visitedStack, wasBacktracking: wasBacktracking });\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    async backtrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                visitedStack.push(visitedNode);\r\n                this.markBacktrackNodes(backtrackNodes);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n\r\n    contains(neighbours, target) {\r\n        for(let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            if(neighbour.row === target.row && neighbour.col === target.col) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    removeFromStack(stack, target) {\r\n        const newStack = new Stack();\r\n        const tempStack = new Stack();\r\n\r\n        while(!stack.isEmpty()) {\r\n            const current = stack.pop();\r\n            if(current.row === target.row && current.col === target.col) {\r\n                continue;\r\n            }\r\n\r\n            tempStack.push(current);\r\n        }\r\n\r\n        while(!tempStack.isEmpty()) {\r\n            newStack.push(tempStack.pop());\r\n        }\r\n\r\n        return newStack;\r\n    }\r\n}\r\n","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nexport default class AStar {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            startNode.gCost = 0;\r\n            startNode.fCost = startNode.gCost + startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                \r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n                    const tempG = currentNode.gCost + 1;\r\n                    const tempF = tempG + neighbour.hCost;\r\n                    if(neighbour.gCost !== null) {\r\n                        if(tempF < neighbour.fCost) {\r\n                            neighbour.gCost = tempG;\r\n                            neighbour.fCost = tempF;\r\n                            neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                            pqueue = updatePqueue(pqueue, neighbour);\r\n                        } \r\n                    } else {\r\n                        neighbour.gCost = tempG;\r\n                        neighbour.fCost = tempF;\r\n                        pqueue.enqueue(neighbour);\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    }\r\n\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nexport default class Greedy {\r\n    constructor(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.startNode = startNode;\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[this.startNode.row][this.startNode.col];\r\n            startNode.fCost = startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.isFinish) {\r\n                await showPath(grid, this.togglePathNode, currentNode.row, currentNode.col);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if((!neighbour.isWall && !neighbour.isVisited) || neighbour.isFinish) {\r\n\r\n                    if(!neighbour.isFrontier) {\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                        this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n\r\n                        neighbour.fCost = neighbour.hCost;\r\n                        pqueue = updatePqueue(pqueue, neighbour);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' },\r\n    { key: 3, text: 'A* Search', value: 'ASTAR' },\r\n    { key: 4, text: 'Greedy Best-First Search', value: 'GREED' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'ASTAR'\r\n                                                                              ? 'A* Search'\r\n                                                                              : this.props.selectedAlgorithm === 'GREED'\r\n                                                                              ? 'Greedy Best-First Search'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport AStar from '../util/algorithms/AStar';\r\nimport Greedy from '../util/algorithms/Greedy';\r\nimport { isAlgorithmRunning, isAlgorithmStopped } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\nimport { \r\n    showInitialBoard, \r\n    runAlgorithm, \r\n    stopAlgorithm, \r\n    pauseAlgorithm, \r\n    completeAlgorithm, \r\n    toggleFrontierNode, \r\n    toggleVisitedNode, \r\n    togglePathNode, \r\n    resetDataStructure, \r\n    setDataStructure, \r\n    notShowingPath, \r\n    markHeadNode, \r\n    unmarkHeadNode, \r\n    resetBoardWithWalls, \r\n    markBacktrackNodes,\r\n    generateRandomGrid,\r\n    dispatchMultipleActions,\r\n    calculateHCost\r\n} from '../actions';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { \r\n            selectedAlgorithm, \r\n            runAlgorithm, \r\n            pauseAlgorithm,\r\n            completeAlgorithm, \r\n            grid,\r\n            dataStructure,\r\n            toggleVisitedNode, \r\n            toggleFrontierNode, \r\n            togglePathNode,\r\n            setDataStructure,\r\n            isShowingPath,\r\n            markHeadNode,\r\n            unmarkHeadNode,\r\n            algorithmStatus,\r\n            markBacktrackNodes,\r\n            startNode,\r\n            endNode,\r\n            calculateHCost\r\n        } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            calculateHCost(endNode);\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"ASTAR\":\r\n                const aStar = new AStar(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await aStar.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"GREED\":\r\n                const greedy = new Greedy(startNode, toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await greedy.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            completeAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard(clearWall) {\r\n        const { \r\n            notShowingPath,\r\n            stopAlgorithm,\r\n            resetDataStructure,\r\n            showInitialBoard,\r\n            resetBoardWithWalls,\r\n            dispatchMultipleActions\r\n        } = this.props;\r\n\r\n        const clearBoardActions = [notShowingPath,\r\n                                   stopAlgorithm,\r\n                                   resetDataStructure];\r\n\r\n        if(clearWall) {\r\n            clearBoardActions.push(showInitialBoard);\r\n        } else {\r\n            clearBoardActions.push(resetBoardWithWalls);\r\n        }\r\n\r\n        dispatchMultipleActions(clearBoardActions);\r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath, generateRandomGrid } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') ? \"active item\" : \"item\";\r\n\r\n        const canGenerateRandomGrid = algorithmStatus === 'STOPPED';\r\n\r\n        const randomGridButtonClass = canGenerateRandomGrid ? \"item\" : \"active item\"; \r\n\r\n        let runButtonText = \"Run\";\r\n\r\n        if((algorithmStatus === 'RUNNING' && isShowingPath) || algorithmStatus === 'COMPLETE') {\r\n            runButtonText = \"Complete\";\r\n        }\r\n\r\n        if(algorithmStatus === 'RUNNING' && !isShowingPath) {\r\n            runButtonText = \"Pause\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui five item menu\">\r\n                <a  onClick={canGenerateRandomGrid ? generateRandomGrid : () => {}} className={randomGridButtonClass} >Generate Random Grid</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <a onClick={() => this.clearBoard(false)} className=\"item\">Clear Path</a>\r\n                <a onClick={() => this.clearBoard(true)} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics,\r\n        startNode: state.moveStartEnd.start,\r\n        endNode: state.moveStartEnd.end\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: (endNode) => dispatch(showInitialBoard(endNode)),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath()),\r\n        markHeadNode: (row, col) => dispatch(markHeadNode(row, col)),\r\n        unmarkHeadNode: (row, col) => dispatch(unmarkHeadNode(row, col)),\r\n        resetBoardWithWalls: (endNode) => dispatch(resetBoardWithWalls(endNode)),\r\n        markBacktrackNodes: (array) => dispatch(markBacktrackNodes(array)),\r\n        generateRandomGrid: () => dispatch(generateRandomGrid()),\r\n        dispatchMultipleActions: (actions) => dispatchMultipleActions(actions),\r\n        calculateHCost: (endNode) => dispatch(calculateHCost(endNode))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass InfoPanel extends React.Component {\r\n    render() {\r\n\r\n        const { unvisited,\r\n                visited,\r\n                wall,\r\n                backtrack,\r\n                frontier,\r\n                path } = this.props.statistics;\r\n\r\n        const displayValue = (value) => (value === 0) ? \"\" : `${value} ` \r\n\r\n\r\n        return (\r\n            <div style={{width: \"85%\", margin: \"auto\", marginTop: \"2vh\"}}>\r\n                <div className=\"ui small eight statistics\">\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-start`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">start</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-finish`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">end</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(unvisited)} <div className={`node node-unvisited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>unvisited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(wall)} <div className={`node node-wall`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>wall</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(visited)} <div className={`node node-visited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>visited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(backtrack)} <div className={`node node-backtrack`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>backtrack</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(frontier)} <div className={`node node-frontier`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>frontier</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(path)} <div className={`node node-path`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>path</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.board.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.board.statistics\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(InfoPanel);","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}