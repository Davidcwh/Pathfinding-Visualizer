{"version":3,"sources":["constants.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","actions/index.js","components/Grid.js","util/AlgorithmUtil.js","util/algorithms/BFS.js","util/algorithms/DFS.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TOTAL_ROW","TOTAL_COL","generateInitalGrid","row","col","grid","r","currentRow","c","push","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","previousNode","isPath","generateToggleWallGrid","currentGrid","newGrid","slice","node","newNode","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","currentNode","generateNodeKey","toString","combineReducers","algorithmStatus","state","action","type","selectedAlgorithm","isShowingPath","payload","dataStructure","isMousePressed","connect","ownProps","dispatch","onMouseDown","toggleWallNode","mouseIsNotPressed","nodeType","id","className","onMouseUp","onMouseEnter","Grid","this","props","map","rowIndex","key","colIndex","React","Component","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","neighbours","upNode","rightNode","downNode","leftNode","isAlgorithmRunning","console","log","store","getState","isAlgorithmPaused","isAlgorithmStopped","showPath","togglePathNode","a","finishNode","stack","Stack","undefined","isEmpty","pop","BFS","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","startNode","enqueue","dequeue","i","length","neighbour","DFS","options","text","value","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","bind","clearBoard","runAlgorithm","stopAlgorithm","pauseAlgorithm","bfs","run","dfs","notShowingPath","resetDataStructure","showInitialBoard","runButtonClass","runButtonText","onClick","LegendItem","style","margin","border","borderRadius","InfoPanel","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"yVAAaA,EACE,GADFA,EAEE,GAFFA,EAGO,GAHPA,EAIO,EAJPA,EAKQ,GALRA,EAMQ,GCJbC,EAA0FD,EAA1EE,EAA0EF,EAA1DG,EAA0DH,EAAzCI,EAAyCJ,EAAxBK,EAAwBL,EAAbM,EAAaN,EAiB3F,SAASO,IAGZ,IAFA,IAhBiBC,EAAKC,EAgBhBC,EAAO,GAELC,EAAI,EAAGA,EAAIN,EAAWM,IAAK,CAG/B,IAFA,IAAMC,EAAa,GAEXC,EAAI,EAAGA,EAAIP,EAAWO,IAC1BD,EAAWE,KArBZ,CACHN,IAFaA,EAsBmBG,EAnBhCF,IAHkBA,EAsBiBI,EAlBnCE,QAASP,IAAQP,GAAkBQ,IAAQP,EAC3Cc,SAAUR,IAAQL,GAAmBM,IAAQL,EAC7Ca,SAAUC,IACVC,WAAW,EACXC,QAAQ,EACRC,YAAY,EACZC,aAAc,KACdC,QAAQ,IAcRb,EAAKI,KAAKF,GAGd,OAAOF,EAGJ,SAASc,EAAuBhB,EAAKC,EAAKgB,GAC7C,IAAMC,EAAUD,EAAYE,QACtBC,EAAOF,EAAQlB,GAAKC,GAEpBoB,EAAO,eACND,EADM,CAETR,QAASQ,EAAKR,SAIlB,OAFAM,EAAQlB,GAAKC,GAAOoB,EAEbH,EAGJ,SAASI,EAA2BtB,EAAKC,EAAKgB,GACjD,IAAMC,EAAUD,EAAYE,QACtBC,EAAOF,EAAQlB,GAAKC,GAEpBoB,EAAO,eACND,EADM,CAETP,YAAaO,EAAKP,aAItB,OAFAK,EAAQlB,GAAKC,GAAOoB,EAEbH,EAGJ,SAASK,EAAwBvB,EAAKC,EAAKgB,GAC9C,IAAMC,EAAUD,EAAYE,QACtBC,EAAOF,EAAQlB,GAAKC,GAEpBoB,EAAO,eACND,EADM,CAETT,WAAW,EACXE,YAAY,IAIhB,OAFAK,EAAQlB,GAAKC,GAAOoB,EAEbH,EAGJ,SAASM,EAAqBxB,EAAKC,EAAKgB,GAC3C,IAAMC,EAAUD,EAAYE,QACtBC,EAAOF,EAAQlB,GAAKC,GAEpBoB,EAAO,eACND,EADM,CAETL,QAAQ,IAIZ,OAFAG,EAAQlB,GAAKC,GAAOoB,EAEbH,EAGJ,SAASO,EAAsBR,GAGlC,IAFA,IAAMC,EAAUnB,IAERI,EAAI,EAAGA,EAAIN,EAAWM,IAC1B,IAAI,IAAIE,EAAI,EAAGA,EAAIP,EAAWO,IAAK,CAC/B,IAAMqB,EAAcT,EAAYd,GAAGE,GAC/BqB,EAAYlB,UAAakB,EAAYnB,UACrCW,EAAQf,GAAGE,GAAGO,OAASc,EAAYd,QAM/C,OAAOM,EAGJ,SAASS,EAAgB3B,EAAKC,GACjC,OAAQD,EAAMH,EAAYI,GAAK2B,WCtGnC,IA6FeC,cAAgB,CAC3BC,gBA9B2B,WAA8B,IAA7BC,EAA4B,uDAAtB,UAAWC,EAAW,uCACxD,OAAOA,EAAOC,MACV,IAAK,gBACD,MAAO,UAEX,IAAK,iBACD,MAAO,UAEX,IAAK,kBACD,MAAO,SAEX,QACI,OAAOF,IAmBfG,kBA5C2B,WAA2B,IAA1BH,EAAyB,uDAAnB,OAAQC,EAAW,uCACrD,OAAOA,EAAOC,MACV,IAAK,MACD,MAAO,MAEX,IAAK,MACD,MAAO,MAEX,QACI,OAAOF,IAoCfI,cAhByB,WAA0B,IAAzBJ,EAAwB,wDAAXC,EAAW,uCAClD,OAAOA,EAAOC,MACV,IAAK,eACD,OAAO,EAEX,IAAK,mBACD,OAAO,EAEX,QACI,OAAOF,IAQf7B,KAjGgB,WAAyC,IAAxC6B,EAAuC,uDAAjChC,IAAsBiC,EAAW,uCACxD,OAAOA,EAAOC,MACV,IAAK,mBACD,OAAOjB,EAAuBgB,EAAOI,QAAQpC,IAAKgC,EAAOI,QAAQnC,IAAK8B,GAE1E,IAAK,uBACD,OAAOT,EAA2BU,EAAOI,QAAQpC,IAAKgC,EAAOI,QAAQnC,IAAK8B,GAE9E,IAAK,sBACD,OAAOR,EAAwBS,EAAOI,QAAQpC,IAAKgC,EAAOI,QAAQnC,IAAK8B,GAE3E,IAAK,mBACD,OAAOP,EAAqBQ,EAAOI,QAAQpC,IAAKgC,EAAOI,QAAQnC,IAAK8B,GAExE,IAAK,qBACD,OAAOhC,IAEX,IAAK,yBACD,OAAO0B,EAAsBM,GAEjC,QACI,OAAOA,IA6EfM,cAzEyB,WAAyB,IAAxBN,EAAuB,uDAAjB,KAAMC,EAAW,uCACjD,OAAOA,EAAOC,MACV,IAAK,uBACD,OAAO,KAEX,IAAK,qBACD,OAAOD,EAAOI,QAElB,QACI,OAAOL,IAiEfO,eA7DwB,WAA0B,IAAzBP,EAAwB,wDAAXC,EAAW,uCACjD,OAAOA,EAAOC,MACV,IAAK,UACD,OAAO,EAEX,IAAK,cACD,OAAO,EAEX,QACI,OAAOF,M,gCCDJQ,G,OAAAA,aArBS,SAACR,EAAOS,GAC5B,IAAMpB,EAAOW,EAAM7B,KAAKsC,EAASxC,KAAKwC,EAASvC,KAE/C,MAAO,CACHM,QAAUa,EAAKb,QACfC,SAAUY,EAAKZ,SACfI,OAAQQ,EAAKR,OACbC,WAAYO,EAAKP,WACjBF,UAAWS,EAAKT,UAChBI,OAAQK,EAAKL,OACbuB,eAAgBP,EAAMO,mBAIH,SAACG,EAAUD,GAClC,MAAO,CACHE,YAAa,kBC3BM,SAAC1C,EAAKC,EAAKwC,GAClCA,EAlBmB,SAACzC,EAAKC,GACzB,MAAO,CACHgC,KAAM,mBACNG,QAAS,CACLpC,MAAKC,QAcJ0C,CAAe3C,EAAKC,IAC7BwC,EATO,CAAER,KAAM,YDkCQS,CAAYF,EAASxC,IAAKwC,EAASvC,IAAKwC,IAC3DG,kBAAmB,kBAAMH,EC/BtB,CAAER,KAAM,oBDmCJM,EA5CF,SAAC,GAA2H,IAAzHvC,EAAwH,EAAxHA,IAAKC,EAAmH,EAAnHA,IAAKM,EAA8G,EAA9GA,QAASC,EAAqG,EAArGA,SAAUI,EAA2F,EAA3FA,OAAQD,EAAmF,EAAnFA,UAAWE,EAAwE,EAAxEA,WAAYE,EAA4D,EAA5DA,OAAQuB,EAAoD,EAApDA,eAAgBI,EAAoC,EAApCA,YAAaE,EAAuB,EAAvBA,kBACvGC,EAAWrC,EACX,cACAD,EACA,aACAQ,EACA,YACAH,EACA,YACAD,EACA,eACAE,EACA,gBACA,GAEN,OAAO,yBACCiC,GAAE,eAAU9C,EAAV,YAAiBC,GACnB8C,UAAS,eAAUF,GACnBH,YAAe7B,GAAeF,GAAcH,GAAaD,EAAyB,aAAdmC,EACpEM,UAAWJ,EACXK,cAAeX,GAAmB1B,GAAWC,GAAeF,GAAcH,GAAaD,EAAyB,aAAdmC,QEnBxGQ,G,8KAEQ,IACChD,EAAQiD,KAAKC,MAAblD,KAEP,OACI,yBAAK6C,UAAU,QAEP7C,EAAKmD,KAAI,SAACrD,EAAKsD,GACX,OACI,yBAAKP,UAAU,WAAWQ,IAAKD,GAEvBtD,EAAIqD,KAAI,SAACpD,EAAKuD,GACV,OAAQ,kBAAC,EAAD,CACID,IAAK5B,EAAgB2B,EAAUE,GAC/BxD,IAAKsD,EACLrD,IAAKuD,gB,GAhBtCC,IAAMC,YAqCVnB,eANS,SAAAR,GACpB,MAAO,CACH7B,KAAM6B,EAAM7B,QAILqC,CAAyBW,G,kDCtChCrD,EAA2DL,EAAhDM,EAAgDN,EAArCG,EAAqCH,EAApBI,EAAoBJ,EAE5D,SAASmE,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAG/C,IAAMI,EAAoB,SAACjC,EAAOX,GACrC,IAAI6C,EAAa,GAEjB,GAAG7C,EAAKpB,IAAM,EAAG,CACb,IAAMkE,EAASnC,EAAMX,EAAKpB,IAAM,GAAGoB,EAAKnB,KACxCgE,EAAW3D,KAAK4D,GAGpB,GAAG9C,EAAKnB,IAAOH,EAAY,EAAI,CAC3B,IAAMqE,EAAYpC,EAAMX,EAAKpB,KAAKoB,EAAKnB,IAAM,GAC7CgE,EAAW3D,KAAK6D,GAGpB,GAAG/C,EAAKpB,IAAOH,EAAY,EAAI,CAC3B,IAAMuE,EAAWrC,EAAMX,EAAKpB,IAAM,GAAGoB,EAAKnB,KAC1CgE,EAAW3D,KAAK8D,GAGpB,GAAGhD,EAAKnB,IAAM,EAAG,CACb,IAAMoE,EAAWtC,EAAMX,EAAKpB,KAAKoB,EAAKnB,IAAM,GAC5CgE,EAAW3D,KAAK+D,GAGpB,OAAOJ,GAGEK,EAAqB,WAE9B,OADAC,QAAQC,IAAR,6BAAkCC,GAAMC,WAAW5C,gBAAnD,MAC6C,YAArC2C,GAAMC,WAAW5C,iBAGhB6C,EAAoB,WAC7B,MAA6C,WAArCF,GAAMC,WAAW5C,iBAGhB8C,EAAqB,WAC9B,MAA6C,YAArCH,GAAMC,WAAW5C,iBAGvBK,EAAgB,WAClB,OAAOsC,GAAMC,WAAWvC,eAGrB,SAAe0C,EAAtB,qC,8CAAO,WAAwB9C,EAAO+C,GAA/B,qBAAAC,EAAA,sDACHN,GAAMhC,SFiCC,CAAER,KAAM,iBE/BT+C,EAAajD,EAAMpC,GAAiBC,GACtC8B,EAAcsD,EACZC,EAAQ,IAAIC,IALf,eAMmBC,IAAhBzD,EANH,oBAOCuD,EAAM3E,KAAKoB,GAEPA,EAAYZ,aATjB,mDAYCY,EAAcK,EAAML,EAAYZ,aAAad,KAAK0B,EAAYZ,aAAab,KAZ5E,0BAeIgF,EAAMG,UAfV,qBAgBIR,KAAyBzC,IAhB7B,0DAoBKf,EAAO6D,EAAMI,MACjBP,EAAe1D,EAAKpB,IAAKoB,EAAKnB,KArB/B,UAsBO0D,EAAM,GAtBb,gCAyBHc,GAAMhC,SFaC,CAAER,KAAM,qBEtCZ,6C,+CCjDCxC,GAAqED,EAArDE,GAAqDF,EAArCG,GAAqCH,EAApBI,GAAoBJ,EAExD8F,G,WACjB,WAAYC,EAAmBC,EAAoBV,EAAgBW,GAAmB,oBAClFtC,KAAKoC,kBAAoBA,EACzBpC,KAAKqC,mBAAqBA,EAC1BrC,KAAK2B,eAAiBA,EACtB3B,KAAKsC,iBAAmBA,E,yFAGlBvF,EAAMwF,G,+EACC,OAAVA,IACCA,EAAQ,IAAIC,KACNC,EAAY1F,EAAKT,IAAgBC,IACvCgG,EAAMG,QAAQD,I,UAGXF,EAAMN,YAAad,I,qBAChB5C,EAAcgE,EAAMI,WACdjF,YAAa,EACzBa,EAAYf,WAAY,EACxBwC,KAAKoC,kBAAkB7D,EAAY1B,IAAK0B,EAAYzB,KAEjDyB,EAAY1B,MAAQL,IAAmB+B,EAAYzB,MAAQL,G,iCACpDiF,EAAS3E,EAAMiD,KAAK2B,gB,yCAIxBb,EAAaD,EAAkB9D,EAAMwB,GACnCqE,EAAI,E,aAAGA,EAAI9B,EAAW+B,Q,qBACpBC,EAAYhC,EAAW8B,IACfnF,QAAWqF,EAAUtF,WAAcsF,EAAUpF,W,oBAEpDa,EAAY1B,MAAQL,IAAmB+B,EAAYzB,MAAQL,G,kCACpDiF,EAAS3E,EAAMiD,KAAK2B,gB,0CAI9BmB,EAAUpF,YAAa,EACvBoF,EAAUnF,aAAe,CAAEd,IAAK0B,EAAY1B,IAAKC,IAAKyB,EAAYzB,KAClEkD,KAAKqC,mBAAmBS,EAAUjG,IAAKiG,EAAUhG,KACjDyF,EAAMG,QAAQI,G,QAZgBF,I,yCAehCpC,EAAM,G,mCAGbgB,I,wBACCxB,KAAKsC,iBAAiBC,G,+BAIvBd,I,4JCrDHnF,GAAqED,EAArDE,GAAqDF,EAArCG,GAAqCH,EAApBI,GAAoBJ,EAExD0G,G,WACjB,WAAYX,EAAmBC,EAAoBV,EAAgBW,GAAmB,oBAClFtC,KAAKoC,kBAAoBA,EACzBpC,KAAKqC,mBAAqBA,EAC1BrC,KAAK2B,eAAiBA,EACtB3B,KAAKsC,iBAAmBA,E,yFAGlBvF,EAAM+E,G,+EACC,OAAVA,IACCA,EAAQ,IAAIC,IACNU,EAAY1F,EAAKT,IAAgBC,IACvCuF,EAAM3E,KAAKsF,I,UAGRX,EAAMG,YAAad,I,qBAChB5C,EAAcuD,EAAMI,OACd1E,WAAY,EACxBwC,KAAKoC,kBAAkB7D,EAAY1B,IAAK0B,EAAYzB,KAEjDyB,EAAY1B,MAAQL,IAAmB+B,EAAYzB,MAAQL,G,gCACpDiF,EAAS3E,EAAMiD,KAAK2B,gB,wCAK9B,IADMb,EAAaD,EAAkB9D,EAAMwB,GACnCqE,EAAI9B,EAAW+B,OAAS,EAAGD,GAAK,EAAGA,KACjCE,EAAYhC,EAAW8B,IACfnF,QAAWqF,EAAUtF,WAAcsF,EAAUpF,aACvDoF,EAAUnF,aAAe,CAAEd,IAAK0B,EAAY1B,IAAKC,IAAKyB,EAAYzB,KAClEgF,EAAM3E,KAAK2F,I,iBAGbtC,EAAM,G,mCAIbgB,I,wBACCxB,KAAKsC,iBAAiBR,G,+BAIvBL,I,sKC3CLuB,GAAU,CACZ,CAAE5C,IAAK,EAAG6C,KAAM,6BAA8BC,MAAO,OACrD,CAAE9C,IAAK,EAAG6C,KAAM,2BAA4BC,MAAO,QAGjDC,G,uKACQ,IAAD,OACCC,EAAyD,SAAjCpD,KAAKC,MAAMlB,kBAA+B,mBACiC,QAAjCiB,KAAKC,MAAMlB,kBACX,6BACiC,QAAjCiB,KAAKC,MAAMlB,kBACX,2BACA,mBAElEsE,EAA0C,YAA/BrD,KAAKC,MAAMtB,gBAE5B,OACI,kBAAC2E,GAAA,EAAD,CACIC,OAAK,EAACN,KAAMG,EACZJ,QAASA,GACTQ,QAAM,EAACC,MAAI,EAACC,SAAU,SAACC,EAAOC,GAAU,EAAK3D,MAAMyD,SAASE,EAAKV,QACjEG,SAAUA,Q,GAhBY/C,IAAMC,WAkC7BnB,gBAbS,SAAAR,GACpB,MAAO,CACHG,kBAAmBH,EAAMG,kBACzBJ,gBAAiBC,EAAMD,oBAIJ,SAAAW,GACvB,MAAO,CACHoE,SAAU,SAACG,GAAevE,EL+BvB,CACHR,KKhCwD+E,QAIjDzE,CAA6C+D,ICpCtDW,G,kDACF,WAAY7D,GAAQ,IAAD,8BACf,cAAMA,IAED8D,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAJH,E,kNAmBWhE,KAAKC,MAVvBlB,E,EAAAA,kBACAmF,E,EAAAA,aACAC,E,EAAAA,cACAC,E,EAAAA,eACArH,E,EAAAA,KACAmC,E,EAAAA,cACAkD,E,EAAAA,kBACAC,E,EAAAA,mBACAV,E,EAAAA,eACAW,E,EAAAA,iBACAtD,E,EAAAA,cAEiB,SAAtBD,IAAgCC,E,qDAIhCmC,I,uBACCiD,I,0BAIJF,I,KAEOnF,E,OACE,Q,QAKA,Q,gCAJKsF,EAAM,IAAIlC,GAAIC,EAAmBC,EAAoBV,EAAgBW,G,UACrE+B,EAAIC,IAAIvH,EAAMmC,G,mDAIdqF,EAAM,IAAIxB,GAAIX,EAAmBC,EAAoBV,EAAgBW,G,UACrEiC,EAAID,IAAIvH,EAAMmC,G,oDAOzBiC,KACCgD,I,0IAMJnE,KAAKC,MAAMuE,iBACXxE,KAAKC,MAAMkE,gBACXnE,KAAKC,MAAMwE,qBACXzE,KAAKC,MAAMyE,qB,+BAGL,IAAD,EACyD1E,KAAKC,MAA3DlB,EADH,EACGA,kBAAmBJ,EADtB,EACsBA,gBAAiBK,EADvC,EACuCA,cAEtC2F,EAAwC,SAAtB5F,GAAgCC,EAAiB,cAAgB,OAEnF4F,EAAqC,YAApBjG,EAAkCK,EAAgB,WAAa,QAAW,MAEjG,OACI,yBAAKY,UAAU,sBACX,uBAAIiF,QAAS7E,KAAK+D,qBAAsBnE,UAAW+E,GAAiBC,EAApE,KACA,kBAAC,GAAD,MACA,uBAAGC,QAAS7E,KAAKiE,WAAYrE,UAAU,QAAvC,oB,GAxEGU,IAAMC,WAuGVnB,gBAzBS,SAAAR,GACpB,MAAO,CACH7B,KAAM6B,EAAM7B,KACZmC,cAAeN,EAAMM,cACrBH,kBAAmBH,EAAMG,kBACzBJ,gBAAiBC,EAAMD,gBACvBK,cAAeJ,EAAMI,kBAIF,SAAAM,GACvB,MAAO,CACHoF,iBAAkB,kBAAMpF,ENlErB,CAAER,KAAM,wBMmEXoF,aAAc,kBAAM5E,EN3EjB,CAAER,KAAM,mBM4EXqF,cAAe,kBAAM7E,ENxElB,CAAER,KAAM,oBMyEXsF,eAAgB,kBAAM9E,EN7DnB,CAAER,KAAM,qBM8DXsD,kBAAmB,SAACvF,EAAKC,GAAN,OAAcwC,ENlDR,SAACzC,EAAKC,GACnC,MAAO,CACHgC,KAAM,sBACNG,QAAS,CACLpC,MAAKC,QM8CiCsF,CAAkBvF,EAAKC,KACjEuF,mBAAoB,SAACxF,EAAKC,GAAN,OAAcwC,EN5DR,SAACzC,EAAKC,GACpC,MAAO,CACHgC,KAAM,uBACNG,QAAS,CACLpC,MAAKC,QMwDkCuF,CAAmBxF,EAAKC,KACnE6E,eAAgB,SAAC9E,EAAKC,GAAN,OAAcwC,EN3CR,SAACzC,EAAKC,GAChC,MAAO,CACHgC,KAAM,mBACNG,QAAS,CACLpC,MAAKC,QMuC8B6E,CAAe9E,EAAKC,KAC3D2H,mBAAoB,kBAAMnF,EN5BvB,CAAER,KAAM,0BM6BXwD,iBAAkB,SAACpD,GAAD,OAAmBI,EN1Bb,SAACJ,GAC7B,MAAO,CACHJ,KAAM,qBACNG,QAASC,GMuBqCoD,CAAiBpD,KAC/DsF,eAAgB,kBAAMlF,ENfnB,CAAER,KAAM,yBMmBJM,CAA6C0E,IC7GtDgB,GAAa,SAAC,GAAgB,IAAfpF,EAAc,EAAdA,SACjB,OACI,yBAAKE,UAAU,SAASmF,MAAO,CAACC,OAAQ,kBACpC,yBAAKpF,UAAS,oBAAeF,GAAYqF,MAAO,CAACE,OAAQ,kBAAmBC,aAAc,SAC1F,6BAAMxF,KAoBHyF,GAfG,WACd,OACI,yBAAKvF,UAAU,0BACX,yBAAKA,UAAU,OAAMmF,MAAO,CAACC,OAAQ,cAAc,wBAAIpF,UAAU,sBAAd,WACnD,kBAAC,GAAD,CAAYF,SAAU,cACtB,kBAAC,GAAD,CAAYA,SAAU,UACtB,kBAAC,GAAD,CAAYA,SAAU,WACtB,kBAAC,GAAD,CAAYA,SAAU,SACtB,kBAAC,GAAD,CAAYA,SAAU,YACtB,kBAAC,GAAD,CAAYA,SAAU,aACtB,kBAAC,GAAD,CAAYA,SAAU,WCFnB0F,I,8KAVP,OACI,yBAAKzF,GAAG,UAAUC,UAAU,OACxB,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,kBAAC,GAAD,W,GAPEU,IAAMC,YCEXe,GAAQ+D,YAAYC,EAASC,OAAOC,8BAAgCD,OAAOC,gCAExFC,IAASC,OAAO,kBAAC,IAAD,CAAUpE,MAAOA,IAAO,kBAAC,GAAD,OAAoBqE,SAASC,cAAc,Y","file":"static/js/main.e9a79b2b.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}","import { gridDetails } from '../constants';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        previousNode: null,\r\n        isPath: false\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: !node.isFrontier\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = generateInitalGrid();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const currentNode = currentGrid[r][c];\r\n            if(!currentNode.isFinish && !currentNode.isStart) {  \r\n                newGrid[r][c].isWall = currentNode.isWall;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}","import { combineReducers } from 'redux';\r\nimport { generateInitalGrid, generateToggleWallGrid, generateToggleFrontierGrid, generateMarkVisitedGrid, generateMarkPathGrid, generateGridWithWalls } from '../util/GridGenerationUtil'\r\n\r\nconst gridReducer = (state=generateInitalGrid(), action) => {\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            return generateToggleWallGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            return generateToggleFrontierGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_VISITED_NODE':\r\n            return generateMarkVisitedGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            return generateMarkPathGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            return generateInitalGrid();\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            return generateGridWithWalls(state);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    grid: gridReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, onMouseDown } from '../actions'\r\n\r\nconst Node = ({ row, col, isStart, isFinish, isWall, isVisited, isFrontier, isPath, isMousePressed, onMouseDown, mouseIsNotPressed}) => {\r\n    const nodeType = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isPath\r\n        ? 'node-path'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : isVisited\r\n        ? 'node-visited'\r\n        : isFrontier\r\n        ? 'node-frontier'\r\n        : ''\r\n\r\n    return <div \r\n            id={`node-${row}-${col}`}\r\n            className={`node ${nodeType}`}\r\n            onMouseDown={(!isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}\r\n            onMouseUp={mouseIsNotPressed}\r\n            onMouseEnter={(isMousePressed && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) ? onMouseDown : () => {}}></div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.grid[ownProps.row][ownProps.col];\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isMousePressed: state.isMousePressed\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onMouseDown: () => onMouseDown(ownProps.row, ownProps.col, dispatch),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nconst mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const onMouseDown = (row, col, dispatch) => {\r\n    dispatch(toggleWallNode(row, col));\r\n    dispatch(mouseIsPressed());\r\n}\r\n\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD'};\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS'};\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil'\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const {grid} = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    console.log(`isAlgorithmRunning:${store.getState().algorithmStatus} `)\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        await sleep(0);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\n\r\nimport Queue from 'queue-fifo';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n  \r\nexport default class BFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class DFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n    }\r\n\r\n    async run(grid, stack) {\r\n        if(stack === null) {\r\n            stack = new Stack();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            stack.push(startNode);\r\n        }\r\n\r\n        while(!stack.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = stack.pop();\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    stack.push(neighbour);\r\n                }\r\n            }\r\n            await sleep(0);\r\n\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(stack);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { showInitialBoard, runAlgorithm, stopAlgorithm, pauseAlgorithm, toggleFrontierNode, toggleVisitedNode, togglePathNode, resetDataStructure, setDataStructure, notShowingPath } from '../actions';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport { isAlgorithmRunning } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { selectedAlgorithm, \r\n                runAlgorithm, \r\n                stopAlgorithm, \r\n                pauseAlgorithm, \r\n                grid,\r\n                dataStructure,\r\n                toggleVisitedNode, \r\n                toggleFrontierNode, \r\n                togglePathNode,\r\n                setDataStructure,\r\n                isShowingPath } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath) {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            stopAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard() {\r\n        this.props.notShowingPath();\r\n        this.props.stopAlgorithm();\r\n        this.props.resetDataStructure();\r\n        this.props.showInitialBoard();\r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath) ? \"active item\" : \"item\";\r\n\r\n        const runButtonText = (algorithmStatus === 'RUNNING') ? (isShowingPath ? \"Complete\" : \"Pause\") : \"Run\";\r\n\r\n        return (\r\n            <div className=\"ui three item menu\">\r\n                <a  onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={this.clearBoard} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: () => dispatch(showInitialBoard()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\n\r\nconst LegendItem = ({nodeType}) => {\r\n    return (\r\n        <div className=\"column\" style={{margin: \"0 5vh 5vh 3vh\"}}>\r\n            <div className={`node node-${nodeType}`} style={{border: \"2px solid white\", borderRadius: \"5px\"}}></div>\r\n            <div>{nodeType}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst InfoPanel = () => {\r\n    return (\r\n        <div className=\"ui center aligned grid\">\r\n            <div className=\"row \"style={{margin: \"2vh 0 0 0\"}}><h2 className=\"ui dividing header\">Legend</h2></div>\r\n            <LegendItem nodeType={'unvisited'} />\r\n            <LegendItem nodeType={'start'} />\r\n            <LegendItem nodeType={'finish'} />\r\n            <LegendItem nodeType={'wall'} />\r\n            <LegendItem nodeType={'visited'} />\r\n            <LegendItem nodeType={'frontier'} />\r\n            <LegendItem nodeType={'path'} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoPanel;","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}