{"version":3,"sources":["constants.js","actions/index.js","util/AlgorithmUtil.js","util/GridGenerationUtil.js","reducers/index.js","components/Node.js","components/Grid.js","util/algorithms/BFS.js","util/algorithms/DFS.js","util/algorithms/AStar.js","util/algorithms/Greedy.js","components/SelectAlgorithmDropdown.js","components/Menu.js","components/InfoPanel.js","components/App.js","index.js"],"names":["gridDetails","defaultStatistics","show","wall","unvisited","visited","backtrack","frontier","path","updateStatistics","grid","type","payload","resetStatistics","resetWall","TOTAL_ROW","TOTAL_COL","FINISH_NODE_ROW","FINISH_NODE_COL","sleep","ms","Promise","resolve","setTimeout","getNodeNeighbours","state","node","neighbours","row","upNode","col","push","rightNode","downNode","leftNode","isAlgorithmRunning","store","getState","algorithmStatus","isAlgorithmPaused","isAlgorithmStopped","isShowingPath","showPath","togglePathNode","a","dispatch","finishNode","currentNode","stack","Stack","undefined","previousNode","isEmpty","pop","START_NODE_ROW","START_NODE_COL","NodeFactory","isStart","isFinish","distance","Infinity","isVisited","isWall","isFrontier","isHead","isBacktrack","isPath","hCost","nodeRow","nodeCol","targetRow","targetCol","Math","abs","gCost","fCost","generateInitalGrid","r","currentRow","c","generateToggleWallGrid","currentGrid","newGrid","slice","newNode","generateToggleFrontierGrid","generateMarkVisitedGrid","generateMarkPathGrid","generateGridWithWalls","generateMarkHeadGrid","generateUnmarkHeadGrid","generateMarkBacktrackGrid","array","i","length","generateNodeKey","toString","getStatistics","stats","combineReducers","statistics","action","selectedAlgorithm","dataStructure","isMousePressed","connect","ownProps","onMouseDown","toggleWallNode","mouseIsNotPressed","nodeType","value","id","className","onMouseUp","onMouseEnter","Grid","this","props","map","rowIndex","key","colIndex","React","Component","BFS","toggleVisitedNode","toggleFrontierNode","setDataStructure","queue","Queue","startNode","enqueue","dequeue","neighbour","DFS","markHeadNode","unmarkHeadNode","markBacktrackNodes","stacks","unvisitedStack","visitedStack","wasBacktracking","removeFromStack","filter","backtrackNodes","visitedNode","contains","peek","target","newStack","tempStack","current","AStar","pqueue","MinPriorityQueue","priority","element","tempG","tempF","Greedy","options","text","SelectAlgorithmDropdown","selectedAlgorithmText","disabled","Dropdown","fluid","simple","item","onChange","event","data","algorithm","Menu","runSelectedAlgorithm","bind","clearBoard","runAlgorithm","pauseAlgorithm","completeAlgorithm","bfs","run","dfs","aStar","greedy","clearWall","notShowingPath","stopAlgorithm","resetDataStructure","showInitialBoard","resetBoardWithWalls","runButtonClass","runButtonText","onClick","showStatistics","hideStatistics","InfoPanel","displayValue","style","width","margin","marginTop","class","border","borderRadius","App","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","querySelector"],"mappings":"yVAAaA,EACE,GADFA,EAEE,GAFFA,EAGO,GAHPA,EAIO,EAJPA,EAKQ,GALRA,EAMQ,GAGRC,EAAoB,CAC7BC,MAAM,EACNC,KAAM,EACNC,UAAWJ,EAAwBA,EAAwB,EAC3DK,QAAS,EACTC,UAAW,EACXC,SAAU,EACVC,KAAM,G,kDC6GGC,EAAmB,SAACC,GAC7B,MAAO,CACHC,KAAM,oBACNC,QAASF,IAIJG,EAAkB,SAACC,GAC5B,MAAO,CACHH,KAAM,mBACNC,QAASE,ICjITC,EAA2Df,EAAhDgB,EAAgDhB,EAArCiB,EAAqCjB,EAApBkB,EAAoBlB,EAE5D,SAASmB,EAAMC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAG/C,IAAMI,EAAoB,SAACC,EAAOC,GACrC,IAAIC,EAAa,GAEjB,GAAGD,EAAKE,IAAM,EAAG,CACb,IAAMC,EAASJ,EAAMC,EAAKE,IAAM,GAAGF,EAAKI,KACxCH,EAAWI,KAAKF,GAGpB,GAAGH,EAAKI,IAAOd,EAAY,EAAI,CAC3B,IAAMgB,EAAYP,EAAMC,EAAKE,KAAKF,EAAKI,IAAM,GAC7CH,EAAWI,KAAKC,GAGpB,GAAGN,EAAKE,IAAOb,EAAY,EAAI,CAC3B,IAAMkB,EAAWR,EAAMC,EAAKE,IAAM,GAAGF,EAAKI,KAC1CH,EAAWI,KAAKE,GAGpB,GAAGP,EAAKI,IAAM,EAAG,CACb,IAAMI,EAAWT,EAAMC,EAAKE,KAAKF,EAAKI,IAAM,GAC5CH,EAAWI,KAAKG,GAGpB,OAAOP,GAGEQ,EAAqB,WAC9B,MAA6C,YAArCC,GAAMC,WAAWC,iBAGhBC,EAAoB,WAC7B,MAA6C,WAArCH,GAAMC,WAAWC,iBAGhBE,EAAqB,WAC9B,MAA6C,YAArCJ,GAAMC,WAAWC,iBAGvBG,EAAgB,WAClB,OAAOL,GAAMC,WAAWI,eAGrB,SAAeC,EAAtB,sC,4CAAO,WAAwBjB,EAAOkB,EAAgBlC,GAA/C,qBAAAmC,EAAA,sDACHR,GAAMS,SDsCC,CAAElC,KAAM,iBCpCTmC,EAAarB,EAAMR,GAAiBC,GACtC6B,EAAcD,EACZE,EAAQ,IAAIC,IALf,eAMmBC,IAAhBH,EANH,oBAOCC,EAAMjB,KAAKgB,GAEPA,EAAYI,aATjB,mDAYCJ,EAActB,EAAMsB,EAAYI,aAAavB,KAAKmB,EAAYI,aAAarB,KAZ5E,0BAeIkB,EAAMI,UAfV,qBAgBIZ,KAAyBC,IAhB7B,0DAoBKf,EAAOsB,EAAMK,MACjBV,EAAejB,EAAKE,IAAKF,EAAKI,KAC9BrB,EAAiBgB,GAtBlB,UAuBON,EAAM,IAvBb,gCA0BHiB,GAAMS,SDiBC,CAAElC,KAAM,qBC3CZ,6C,sBA6BA,IC9EC2C,EAA0FtD,EAA1EuD,EAA0EvD,EAA1DiB,EAA0DjB,EAAzCkB,EAAyClB,EAAxBe,EAAwBf,EAAbgB,EAAahB,EAElG,SAASwD,EAAY5B,EAAKE,GACtB,MAAO,CACHF,MACAE,MACA2B,QAAS7B,IAAQ0B,GAAkBxB,IAAQyB,EAC3CG,SAAU9B,IAAQX,GAAmBa,IAAQZ,EAC7CyC,SAAUC,IACVC,WAAW,EACXC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,aAAa,EACbd,aAAc,KACde,QAAQ,EACRC,OD8DkCC,EC9DDxC,ED8DUyC,EC9DLvC,ED8DcwC,EC9DTrD,ED8DoBsD,EC9DHrD,ED+DzDsD,KAAKC,IAAIL,EAAUE,GAAaE,KAAKC,IAAIJ,EAAUE,IC9DtDG,MAAO,KACPC,MAAO,MD4D0B,IAACP,EAASC,EAASC,EAAWC,ECxDhE,SAASK,IAGZ,IAFA,IAAMlE,EAAO,GAELmE,EAAI,EAAGA,EAAI9D,EAAW8D,IAAK,CAG/B,IAFA,IAAMC,EAAa,GAEXC,EAAI,EAAGA,EAAI/D,EAAW+D,IAC1BD,EAAW/C,KAAKyB,EAAYqB,EAAGE,IAGnCrE,EAAKqB,KAAK+C,GAGd,OAAOpE,EAGJ,SAASsE,EAAuBpD,EAAKE,EAAKmD,GAC7C,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAEToC,QAASpC,EAAKoC,SAIlB,OAFAoB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASG,EAA2BzD,EAAKE,EAAKmD,GACjD,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETqC,YAAY,IAIhB,OAFAmB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASI,EAAwB1D,EAAKE,EAAKmD,GAC9C,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETmC,WAAW,EACXE,YAAY,IAIhB,OAFAmB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASK,EAAqB3D,EAAKE,EAAKmD,GAC3C,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETwC,QAAQ,IAIZ,OAFAgB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASM,EAAsBP,GAGlC,IAFA,IAAMC,EAAUN,IAERC,EAAI,EAAGA,EAAI9D,EAAW8D,IAC1B,IAAI,IAAIE,EAAI,EAAGA,EAAI/D,EAAW+D,IAAK,CAC/B,IAAMhC,EAAckC,EAAYJ,GAAGE,GAC/BhC,EAAYW,UAAaX,EAAYU,UACrCyB,EAAQL,GAAGE,GAAGjB,OAASf,EAAYe,QAM/C,OAAOoB,EAGJ,SAASO,EAAqB7D,EAAKE,EAAKmD,GAC3C,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETsC,QAAQ,IAIZ,OAFAkB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASQ,EAAuB9D,EAAKE,EAAKmD,GAC7C,IAAMC,EAAUD,EAAYE,QACtBzD,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETsC,QAAQ,IAIZ,OAFAkB,EAAQtD,GAAKE,GAAOsD,EAEbF,EAGJ,SAASS,EAA0BC,EAAOX,GAG7C,IAFA,IAAMC,EAAUD,EAAYE,QAEpBU,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,EACbD,EAAMC,GAAnBjE,EAD0B,EAC1BA,IAAKE,EADqB,EACrBA,IACPJ,EAAOwD,EAAQtD,GAAKE,GAEpBsD,EAAO,eACN1D,EADM,CAETuC,aAAa,IAEjBiB,EAAQtD,GAAKE,GAAOsD,EAGxB,OAAOF,EAGJ,SAASa,EAAgBnE,EAAKE,GACjC,OAAQF,EAAMb,EAAYe,GAAKkE,WAG5B,SAASC,GAAcvF,EAAMR,GAGhC,IAFA,IAAMgG,EAAK,eAAQjG,GAEX4E,EAAI,EAAGA,EAAI9D,EAAW8D,IAC1B,IAAI,IAAIE,EAAI,EAAGA,EAAI/D,EAAW+D,IAAK,CAC/B,IAAMrD,EAAOhB,EAAKmE,GAAGE,GAElBrD,EAAKoC,QACJoC,EAAM/F,OAGPuB,EAAKmC,WACJqC,EAAM7F,UAGPqB,EAAKuC,aACJiC,EAAM5F,YAGPoB,EAAKqC,YACJmC,EAAM3F,WAGPmB,EAAKwC,QACJgC,EAAM1F,OAQlB,OAHA0F,EAAM9F,UAAaW,EAAYC,EAAY,EAAKkF,EAAM/F,KAAO+F,EAAM7F,QAAU6F,EAAM5F,UAAY4F,EAAM3F,SACrG2F,EAAMhG,KAAOA,EAENgG,EAGJ,SAASrF,GAAgBV,EAAMW,GAClC,IAAMoF,EAAK,eAAQjG,GAOnB,OALIa,IACAoF,EAAM/F,KAAOA,EACb+F,EAAM9F,UAAY8F,EAAM9F,UAAYD,GAGjC+F,EC5LX,IAkIeC,eAAgB,CAC3BC,WApBsB,WAAsC,IAArC3E,EAAoC,uDAA9BxB,EAAmBoG,EAAW,uCAC3D,OAAOA,EAAO1F,MACV,IAAK,oBACD,OAAOsF,GAAcI,EAAOzF,QAASa,EAAMvB,MAE/C,IAAK,mBACD,OAAOW,GAAgBY,EAAMtB,KAAMkG,EAAOzF,SAE9C,IAAK,kBACD,OAAO,eAAKX,EAAZ,CAA+BC,MAAM,IAEzC,IAAK,kBACD,OAAO,eAAKD,EAAZ,CAA+BC,MAAM,IAEzC,QACI,OAAOuB,IAMfa,gBArD2B,WAA8B,IAA7Bb,EAA4B,uDAAtB,UAAW4E,EAAW,uCACxD,OAAOA,EAAO1F,MACV,IAAK,gBACD,MAAO,UAEX,IAAK,iBACD,MAAO,UAEX,IAAK,kBACD,MAAO,SAEX,IAAK,qBACD,MAAO,WAEX,QACI,OAAOc,IAuCf6E,kBAzE2B,WAA2B,IAA1B7E,EAAyB,uDAAnB,OAAQ4E,EAAW,uCACrD,OAAOA,EAAO1F,MACV,IAAK,MACD,MAAO,MAEX,IAAK,MACD,MAAO,MAEX,IAAK,QACD,MAAO,QAEX,IAAK,QACD,MAAO,QAEX,QACI,OAAOc,IA2DfgB,cApCyB,WAA0B,IAAzBhB,EAAwB,wDAAX4E,EAAW,uCAClD,OAAOA,EAAO1F,MACV,IAAK,eACD,OAAO,EAEX,IAAK,mBACD,OAAO,EAEX,QACI,OAAOc,IA4Bff,KAvIgB,WAAyC,IAAxCe,EAAuC,uDAAjCmD,IAAsByB,EAAW,uCACxD,OAAOA,EAAO1F,MACV,IAAK,mBACD,OAAOqE,EAAuBqB,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAE1E,IAAK,uBACD,OAAO4D,EAA2BgB,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAE9E,IAAK,sBACD,OAAO6D,EAAwBe,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAE3E,IAAK,mBACD,OAAO8D,EAAqBc,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAExE,IAAK,qBACD,OAAOmD,IAEX,IAAK,yBACD,OAAOY,EAAsB/D,GAEjC,IAAK,iBACD,OAAOgE,EAAqBY,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAExE,IAAK,mBACD,OAAOiE,EAAuBW,EAAOzF,QAAQgB,IAAKyE,EAAOzF,QAAQkB,IAAKL,GAE1E,IAAK,sBACD,OAAOkE,EAA0BU,EAAOzF,QAAQgF,MAAOnE,GAE3D,QACI,OAAOA,IA0Gf8E,cAtGyB,WAAyB,IAAxB9E,EAAuB,uDAAjB,KAAM4E,EAAW,uCACjD,OAAOA,EAAO1F,MACV,IAAK,uBACD,OAAO,KAEX,IAAK,qBACD,OAAO0F,EAAOzF,QAElB,QACI,OAAOa,IA8Ff+E,eA1FwB,WAA0B,IAAzB/E,EAAwB,wDAAX4E,EAAW,uCACjD,OAAOA,EAAO1F,MACV,IAAK,UACD,OAAO,EAEX,IAAK,cACD,OAAO,EAEX,QACI,OAAOc,M,oCCRJgF,I,OAAAA,aA5BS,SAAChF,EAAOiF,GAC5B,IAAMhF,EAAOD,EAAMf,KAAKgG,EAAS9E,KAAK8E,EAAS5E,KAE/C,MAAO,CACH2B,QAAU/B,EAAK+B,QACfC,SAAUhC,EAAKgC,SACfI,OAAQpC,EAAKoC,OACbC,WAAYrC,EAAKqC,WACjBF,UAAWnC,EAAKmC,UAChBK,OAAQxC,EAAKwC,OACbF,OAAQtC,EAAKsC,OACbC,YAAavC,EAAKuC,YAClBuC,eAAgB/E,EAAM+E,eACtBrC,MAAOzC,EAAKyC,MACZO,MAAOhD,EAAKgD,MACZC,MAAOjD,EAAKiD,MACZ2B,kBAAmB7E,EAAM6E,kBACzB5F,KAAMe,EAAMf,SAIO,SAACmC,EAAU6D,GAClC,MAAO,CACHC,YAAa,SAACjG,GAAD,OJxCM,SAACkB,EAAKE,EAAKe,EAAUnC,GAC5CmC,EAlBmB,SAACjB,EAAKE,GACzB,MAAO,CACHnB,KAAM,mBACNC,QAAS,CACLgB,MAAKE,QAcJ8E,CAAehF,EAAKE,IAC7Be,EATO,CAAElC,KAAM,YAUfkC,EAASpC,EAAiBC,IIqCCiG,CAAYD,EAAS9E,IAAK8E,EAAS5E,IAAKe,EAAUnC,IACzEmG,kBAAmB,kBAAMhE,EJ5CtB,CAAElC,KAAM,oBIgDJ8F,EAzDF,SAAC,GAAiL,IAA/K7E,EAA8K,EAA9KA,IAAKE,EAAyK,EAAzKA,IAAK2B,EAAoK,EAApKA,QAASC,EAA2J,EAA3JA,SAAUI,EAAiJ,EAAjJA,OAAQE,EAAyI,EAAzIA,OAAQH,EAAiI,EAAjIA,UAAWE,EAAsH,EAAtHA,WAAYG,EAA0G,EAA1GA,OAAQD,EAAkG,EAAlGA,YAAauC,EAAqF,EAArFA,eAAgBG,EAAqE,EAArEA,YAAaE,EAAwD,EAAxDA,kBAAmBlC,EAAqC,EAArCA,MAAO2B,EAA8B,EAA9BA,kBAAmB5F,EAAW,EAAXA,KACzKoG,EAAWpD,EACX,cACAD,EACA,aACAS,EACA,YACAJ,EACA,YACAE,EACA,YACAC,EACA,iBACAJ,EACA,eACAE,EACA,gBACA,GAEAgD,EAAgC,UAAtBT,GAAuD,UAAtBA,GAA6C,OAAV3B,EAA2B,GAARA,EAEvG,OAAO,yBACCqC,GAAE,eAAUpF,EAAV,YAAiBE,GACnBmF,UAAS,eAAUH,GACnBH,YAAe5C,GAAeF,GAAcH,GAAaD,EAAqC,aAA1B,kBAAMkD,EAAYjG,IACtFwG,UAAWL,EACXM,cAAeX,GAAmB1C,GAAWC,GAAeF,GAAcH,GAAaD,EAAqC,aAA1B,kBAAMkD,EAAYjG,KAAmBqG,OCzB7IK,I,kLAEQ,IACC1G,EAAQ2G,KAAKC,MAAb5G,KAEP,OACI,yBAAKuG,UAAU,QAEPvG,EAAK6G,KAAI,SAAC3F,EAAK4F,GACX,OACI,yBAAKP,UAAU,WAAWQ,IAAKD,GAEvB5F,EAAI2F,KAAI,SAACzF,EAAK4F,GACV,OAAQ,kBAAC,GAAD,CACID,IAAK1B,EAAgByB,EAAUE,GAC/B9F,IAAK4F,EACL1F,IAAK4F,gB,GAhBtCC,IAAMC,YAqCVnB,gBANS,SAAAhF,GACpB,MAAO,CACHf,KAAMe,EAAMf,QAIL+F,CAAyBW,I,8BCtChC9D,GAAqEtD,EAArDuD,GAAqDvD,EAArCiB,GAAqCjB,EAApBkB,GAAoBlB,EAExD6H,G,WACjB,WAAYC,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,GAAmB,qBACpG4G,KAAKS,kBAAoBA,EACzBT,KAAKU,mBAAqBA,EAC1BV,KAAK1E,eAAiBA,EACtB0E,KAAKW,iBAAmBA,EACxBX,KAAK5G,iBAAmBA,E,0FAGlBC,EAAMuH,G,+EACC,OAAVA,IACCA,EAAQ,IAAIC,KACNC,EAAYzH,EAAK4C,IAAgBC,IACvC0E,EAAMG,QAAQD,I,UAGXF,EAAM7E,YAAajB,I,qBAChBY,EAAckF,EAAMI,WACdtE,YAAa,EACzBhB,EAAYc,WAAY,EACxBwD,KAAKS,kBAAkB/E,EAAYnB,IAAKmB,EAAYjB,KAEjDiB,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,iCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,yCAI7CkB,EAAaH,EAAkBd,EAAMqC,GACnC8C,EAAI,E,aAAGA,EAAIlE,EAAWmE,Q,qBACpBwC,EAAY3G,EAAWkE,IACf/B,QAAWwE,EAAUzE,WAAcyE,EAAUvE,W,oBAEpDhB,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,kCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,0CAInD6H,EAAUvE,YAAa,EACvBuE,EAAUnF,aAAe,CAAEvB,IAAKmB,EAAYnB,IAAKE,IAAKiB,EAAYjB,KAClEuF,KAAKU,mBAAmBO,EAAU1G,IAAK0G,EAAUxG,KACjDmG,EAAMG,QAAQE,G,QAZgBzC,I,+BAetCwB,KAAK5G,iBAAiBC,G,UAChBS,EAAM,G,mCAGboB,I,wBACC8E,KAAKW,iBAAiBC,G,+BAIvBzF,I,4JCvDHc,GAAqEtD,EAArDuD,GAAqDvD,EAArCiB,GAAqCjB,EAApBkB,GAAoBlB,EAExDuI,G,WACjB,WAAYT,EAAmBC,EAAoBpF,EAAgB6F,EAAcC,EAAgBC,EAAoBV,EAAkBvH,GAAmB,qBACtJ4G,KAAKS,kBAAoBA,EACzBT,KAAKU,mBAAqBA,EAC1BV,KAAK1E,eAAiBA,EACtB0E,KAAKmB,aAAeA,EACpBnB,KAAKoB,eAAiBA,EACtBpB,KAAKqB,mBAAqBA,EAC1BrB,KAAKW,iBAAmBA,EACxBX,KAAK5G,iBAAmBA,E,0FAGlBC,EAAMiI,G,2FACRC,EAAiB,KACjBC,EAAe,KACfC,EAAkB,KAER,OAAXH,GACCC,EAAiB,IAAI3F,IACfkF,EAAYzH,EAAK4C,IAAgBC,IACvCqF,EAAe7G,KAAKoG,GAEpBU,EAAe,IAAI5F,IACnB6F,GAAkB,IAElBF,EAAiBD,EAAOC,eACxBC,EAAeF,EAAOE,aACtBC,EAAkBH,EAAOG,iB,UAGtBF,EAAexF,YAAajB,I,qBAC5B2G,E,iCACyBzB,KAAK/G,UAAUuI,EAAcD,EAAgBlI,G,cAArEoI,E,iBACM3H,EAAM,I,iDAKV4B,EAAc6F,EAAevF,MACnCuF,EAAiBvB,KAAK0B,gBAAgBH,EAAgB7F,GAEtDA,EAAYc,WAAY,EACxBd,EAAYiB,QAAS,EACrBqD,KAAKmB,aAAazF,EAAYnB,IAAKmB,EAAYjB,KAC/CuF,KAAKS,kBAAkB/E,EAAYnB,IAAKmB,EAAYjB,KAEpB,OAA7BiB,EAAYI,eAAwB,EACdJ,EAAYI,aAAzBvB,EAD0B,EAC1BA,IAAKE,EADqB,EACrBA,IACbpB,EAAKkB,GAAKE,GAAKkC,QAAS,EACxBqD,KAAKoB,eAAe7G,EAAKE,IAG1BiB,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,kCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,0CAKnD,IADMkB,EAAaH,EAAkBd,EAAMqC,GACnC8C,EAAIlE,EAAWmE,OAAS,EAAGD,GAAK,EAAGA,KACjCyC,EAAY3G,EAAWkE,IACf/B,QAAWwE,EAAUzE,WAAcyE,EAAUvE,aACvDuE,EAAUnF,aAAe,CAAEvB,IAAKmB,EAAYnB,IAAKE,IAAKiB,EAAYjB,KAClE8G,EAAe7G,KAAKuG,I,GAI5BO,EAAa9G,KAAKgB,GAIY,IAFNpB,EAAWqH,QAAO,SAAAV,GAAS,OAAKA,EAAUxE,SAAWwE,EAAUzE,YAAcyE,EAAUvE,cAE5F+B,O,wBAIf/C,EAAYiB,QAAS,EACrBqD,KAAKoB,eAAe1F,EAAYnB,IAAKmB,EAAYjB,K,UAC3CX,EAAM,I,yBACYkG,KAAK/G,UAAUuI,EAAcD,EAAgBlI,G,QAArEoI,E,sBAIJzB,KAAK5G,iBAAiBC,G,UAChBS,EAAM,I,mCAGboB,I,wBACC8E,KAAKW,iBAAiB,CAAEY,eAAgBA,EAAgBC,aAAcA,EAAcC,gBAAiBA,I,+BAItGtG,I,8NAKSqG,EAAcD,EAAgBlI,G,2EAEtCuI,EAAiB,G,UAEdJ,EAAazF,WAAcwF,EAAexF,YAAajB,I,oBACpD+G,EAAcL,EAAaxF,MAGjC1B,GADIA,EAAaH,EAAkBd,EAAMwI,IACjBF,QAAO,SAAAV,GAAS,OAAKA,EAAUxE,SAAWwE,EAAUzE,YAAcyE,EAAUvE,eACjGsD,KAAK8B,SAASxH,EAAYiH,EAAeQ,Q,wBAExCP,EAAa9G,KAAKmH,GAClB7B,KAAKqB,mBAAmBO,G,2BAGxBA,EAAelH,KAAKmH,G,kKAMvBvH,EAAY0H,GACjB,IAAI,IAAIxD,EAAI,EAAGA,EAAIlE,EAAWmE,OAAQD,IAAK,CACvC,IAAMyC,EAAY3G,EAAWkE,GAC7B,GAAGyC,EAAU1G,MAAQyH,EAAOzH,KAAO0G,EAAUxG,MAAQuH,EAAOvH,IACxD,OAAO,EAKf,OAAO,I,sCAGKkB,EAAOqG,GAInB,IAHA,IAAMC,EAAW,IAAIrG,IACfsG,EAAY,IAAItG,KAEfD,EAAMI,WAAW,CACpB,IAAMoG,EAAUxG,EAAMK,MACnBmG,EAAQ5H,MAAQyH,EAAOzH,KAAO4H,EAAQ1H,MAAQuH,EAAOvH,KAIxDyH,EAAUxH,KAAKyH,GAGnB,MAAOD,EAAUnG,WACbkG,EAASvH,KAAKwH,EAAUlG,OAG5B,OAAOiG,M,KClJPhG,GAAqEtD,EAArDuD,GAAqDvD,EAArCiB,GAAqCjB,EAApBkB,GAAoBlB,EAExDyJ,G,WACjB,WAAY3B,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,GAAmB,qBACpG4G,KAAKS,kBAAoBA,EACzBT,KAAKU,mBAAqBA,EAC1BV,KAAK1E,eAAiBA,EACtB0E,KAAKW,iBAAmBA,EACxBX,KAAK5G,iBAAmBA,E,0FAGlBC,EAAMgJ,G,mFACE,OAAXA,IACCA,EAAS,IAAIC,mBAAiB,CAAEC,SAAU,SAAClI,GAAD,OAAUA,EAAKiD,UACnDwD,EAAYzH,EAAK4C,IAAgBC,KAC7BmB,MAAQ,EAClByD,EAAUxD,MAAQwD,EAAUzD,MAAQyD,EAAUhE,MAC9CuF,EAAOtB,QAAQD,I,UAIZuB,EAAOtG,YAAajB,I,qBACjBY,EAAc2G,EAAOrB,UAAUwB,SACzB9F,YAAa,EACzBhB,EAAYc,WAAY,EACxBwD,KAAKS,kBAAkB/E,EAAYnB,IAAKmB,EAAYjB,KAEjDiB,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,iCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,yCAI7CkB,EAAaH,EAAkBd,EAAMqC,GACnC8C,EAAI,E,aAAGA,EAAIlE,EAAWmE,Q,qBACpBwC,EAAY3G,EAAWkE,IACf/B,QAAWwE,EAAUzE,U,oBAE5Bd,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,kCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,0CAY7CqJ,EAAQ/G,EAAY2B,MAAQ,EAC5BqF,EAAQD,EAAQxB,EAAUnE,MACT,OAApBmE,EAAU5D,MACNqF,EAAQzB,EAAU3D,QACjB2D,EAAU5D,MAAQoF,EAClBxB,EAAU3D,MAAQoF,EAClBzB,EAAUnF,aAAe,CAAEvB,IAAKmB,EAAYnB,IAAKE,IAAKiB,EAAYjB,OAGtEwG,EAAU5D,MAAQoF,EAClBxB,EAAU3D,MAAQoF,EAClBL,EAAOtB,QAAQE,GACfA,EAAUvE,YAAa,EACvBuE,EAAUnF,aAAe,CAAEvB,IAAKmB,EAAYnB,IAAKE,IAAKiB,EAAYjB,MAGtEuF,KAAKU,mBAAmBO,EAAU1G,IAAK0G,EAAUxG,K,QAjCnB+D,I,+BAqCtCwB,KAAK5G,iBAAiBC,G,UAChBS,EAAM,I,mCAGboB,I,wBACC8E,KAAKW,iBAAiB0B,G,+BAIvBlH,I,4JC/EHc,GAAqEtD,EAArDuD,GAAqDvD,EAArCiB,GAAqCjB,EAApBkB,GAAoBlB,EAExDgK,G,WACjB,WAAYlC,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,GAAmB,qBACpG4G,KAAKS,kBAAoBA,EACzBT,KAAKU,mBAAqBA,EAC1BV,KAAK1E,eAAiBA,EACtB0E,KAAKW,iBAAmBA,EACxBX,KAAK5G,iBAAmBA,E,0FAGlBC,EAAMgJ,G,+EACE,OAAXA,IACCA,EAAS,IAAIC,mBAAiB,CAAEC,SAAU,SAAClI,GAAD,OAAUA,EAAKiD,UACnDwD,EAAYzH,EAAK4C,IAAgBC,KAC7BoB,MAAQwD,EAAUhE,MAC5BuF,EAAOtB,QAAQD,I,UAIZuB,EAAOtG,YAAajB,I,qBACjBY,EAAc2G,EAAOrB,UAAUwB,SACzB9F,YAAa,EACzBhB,EAAYc,WAAY,EACxBwD,KAAKS,kBAAkB/E,EAAYnB,IAAKmB,EAAYjB,KAEjDiB,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,iCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,yCAI7CkB,EAAaH,EAAkBd,EAAMqC,GACnC8C,EAAI,E,aAAGA,EAAIlE,EAAWmE,Q,qBACpBwC,EAAY3G,EAAWkE,IACf/B,QAAWwE,EAAUzE,U,oBAE5Bd,EAAYnB,MAAQX,IAAmB8B,EAAYjB,MAAQZ,G,kCACpDwB,EAAShC,EAAM2G,KAAK1E,eAAgB0E,KAAK5G,kB,0CAInD6H,EAAUvE,YAAa,EACvBuE,EAAUnF,aAAe,CAAEvB,IAAKmB,EAAYnB,IAAKE,IAAKiB,EAAYjB,KAClEuF,KAAKU,mBAAmBO,EAAU1G,IAAK0G,EAAUxG,KAEjDwG,EAAU3D,MAAQ2D,EAAUnE,MAC5BuF,EAAOtB,QAAQE,G,QAdezC,I,+BAkBtCwB,KAAK5G,iBAAiBC,G,UAChBS,EAAM,I,mCAGboB,I,wBACC8E,KAAKW,iBAAiB0B,G,+BAIvBlH,I,sKC3DLyH,GAAU,CACZ,CAAExC,IAAK,EAAGyC,KAAM,6BAA8BnD,MAAO,OACrD,CAAEU,IAAK,EAAGyC,KAAM,2BAA4BnD,MAAO,OACnD,CAAEU,IAAK,EAAGyC,KAAM,YAAanD,MAAO,SACpC,CAAEU,IAAK,EAAGyC,KAAM,2BAA4BnD,MAAO,UAGjDoD,G,2KACQ,IAAD,OACCC,EAAyD,SAAjC/C,KAAKC,MAAMhB,kBAA+B,mBACiC,QAAjCe,KAAKC,MAAMhB,kBACX,6BACiC,QAAjCe,KAAKC,MAAMhB,kBACX,2BACiC,UAAjCe,KAAKC,MAAMhB,kBACX,YACiC,UAAjCe,KAAKC,MAAMhB,kBACX,2BACA,mBAElE+D,EAA0C,YAA/BhD,KAAKC,MAAMhF,gBAE5B,OACI,kBAACgI,GAAA,EAAD,CACIC,OAAK,EAACL,KAAME,EACZH,QAASA,GACTO,QAAM,EAACC,MAAI,EAACC,SAAU,SAACC,EAAOC,GAAU,EAAKtD,MAAMoD,SAASE,EAAK7D,QACjEsD,SAAUA,Q,GApBY1C,IAAMC,WAsC7BnB,gBAbS,SAAAhF,GACpB,MAAO,CACH6E,kBAAmB7E,EAAM6E,kBACzBhE,gBAAiBb,EAAMa,oBAIJ,SAAAO,GACvB,MAAO,CACH6H,SAAU,SAACG,GAAehI,EV8BvB,CACHlC,KU/BwDkK,QAIjDpE,CAA6C0D,ICtBtDW,G,oDACF,WAAYxD,GAAQ,IAAD,+BACf,cAAMA,IAEDyD,qBAAuB,EAAKA,qBAAqBC,KAA1B,iBAC5B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,iBAJH,E,iOAwBc3D,KAAKC,MAf1BhB,E,EAAAA,kBACA4E,E,EAAAA,aACAC,E,EAAAA,eACAC,E,EAAAA,kBACA1K,E,EAAAA,KACA6F,E,EAAAA,cACAuB,E,EAAAA,kBACAC,E,EAAAA,mBACApF,E,EAAAA,eACAqF,E,EAAAA,iBACAvF,E,EAAAA,cACA+F,E,EAAAA,aACAC,E,EAAAA,eACAnG,E,EAAAA,gBACAoG,E,EAAAA,mBACAjI,E,EAAAA,iBAEiB,SAAtB6F,IAAgC7D,GAAqC,aAApBH,E,qDAIjDH,I,uBACCgJ,I,0BAIJD,I,KAEO5E,E,OACE,Q,QAKA,Q,QAKA,U,QAKA,U,gCAdK+E,EAAM,IAAIxD,GAAIC,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,G,UACvF4K,EAAIC,IAAI5K,EAAM6F,G,mDAIdgF,EAAM,IAAIhD,GAAIT,EAAmBC,EAAoBpF,EAAgB6F,EAAcC,EAAgBC,EAAoBV,EAAkBvH,G,UACzI8K,EAAID,IAAI5K,EAAM6F,G,mDAIdiF,EAAQ,IAAI/B,GAAM3B,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,G,UAC3F+K,EAAMF,IAAI5K,EAAM6F,G,mDAIhBkF,EAAS,IAAIzB,GAAOlC,EAAmBC,EAAoBpF,EAAgBqF,EAAkBvH,G,UAC7FgL,EAAOH,IAAI5K,EAAM6F,G,oDAO5BpE,KACCiJ,I,wIAKGM,GACPrE,KAAKC,MAAMqE,iBACXtE,KAAKC,MAAMsE,gBACXvE,KAAKC,MAAMuE,qBACXxE,KAAKC,MAAMzG,gBAAgB6K,GAExBA,EACCrE,KAAKC,MAAMwE,mBAEXzE,KAAKC,MAAMyE,wB,+BAKT,IAAD,SACyD1E,KAAKC,MAA3DhB,EADH,EACGA,kBAAmBhE,EADtB,EACsBA,gBAAiBG,EADvC,EACuCA,cAEtCuJ,EAAwC,SAAtB1F,GAAgC7D,GAAqC,aAApBH,EAAkC,cAAgB,OAEvH2J,EAAgB,MASpB,OARwB,YAApB3J,GAAiCG,GAAsC,aAApBH,KACnD2J,EAAgB,YAGG,YAApB3J,GAAkCG,IACjCwJ,EAAgB,SAIhB,yBAAKhF,UAAU,qBACX,uBAAIiF,QAAS7E,KAAK0D,qBAAsB9D,UAAW+E,GAAiBC,EAApE,KACA,kBAAC,GAAD,MACA,uBAAGC,QAAS,kBAAM,EAAKjB,YAAW,IAAQhE,UAAU,QAApD,cACA,uBAAGiF,QAAS,kBAAM,EAAKjB,YAAW,IAAOhE,UAAU,QAAnD,oB,GAtGGU,IAAMC,WA+IVnB,gBAnCS,SAAAhF,GACpB,MAAO,CACHf,KAAMe,EAAMf,KACZ6F,cAAe9E,EAAM8E,cACrBD,kBAAmB7E,EAAM6E,kBACzBhE,gBAAiBb,EAAMa,gBACvBG,cAAehB,EAAMgB,cACrB2D,WAAY3E,EAAM2E,eAIC,SAAAvD,GACvB,MAAO,CACHiJ,iBAAkB,kBAAMjJ,EXpHrB,CAAElC,KAAM,wBWqHXuK,aAAc,kBAAMrI,EX7HjB,CAAElC,KAAM,mBW8HXiL,cAAe,kBAAM/I,EX1HlB,CAAElC,KAAM,oBW2HXwK,eAAgB,kBAAMtI,EX/GnB,CAAElC,KAAM,qBWgHXyK,kBAAmB,kBAAMvI,EX5GtB,CAAElC,KAAM,wBW6GXmH,kBAAmB,SAAClG,EAAKE,GAAN,OAAce,EXjGR,SAACjB,EAAKE,GACnC,MAAO,CACHnB,KAAM,sBACNC,QAAS,CACLgB,MAAKE,QW6FiCgG,CAAkBlG,EAAKE,KACjEiG,mBAAoB,SAACnG,EAAKE,GAAN,OAAce,EX3GR,SAACjB,EAAKE,GACpC,MAAO,CACHnB,KAAM,uBACNC,QAAS,CACLgB,MAAKE,QWuGkCiG,CAAmBnG,EAAKE,KACnEa,eAAgB,SAACf,EAAKE,GAAN,OAAce,EX1FR,SAACjB,EAAKE,GAChC,MAAO,CACHnB,KAAM,mBACNC,QAAS,CACLgB,MAAKE,QWsF8Ba,CAAef,EAAKE,KAC3D+J,mBAAoB,kBAAMhJ,EX3EvB,CAAElC,KAAM,0BW4EXqH,iBAAkB,SAACzB,GAAD,OAAmB1D,EXzEb,SAAC0D,GAC7B,MAAO,CACH5F,KAAM,qBACNC,QAAS2F,GWsEqCyB,CAAiBzB,KAC/DoF,eAAgB,kBAAM9I,EX9DnB,CAAElC,KAAM,sBW+DX6H,aAAc,SAAC5G,EAAKE,GAAN,OAAce,EX5DR,SAACjB,EAAKE,GAC9B,MAAO,CACHnB,KAAM,iBACNC,QAAS,CACLgB,MAAKE,QWwD4B0G,CAAa5G,EAAKE,KACvD2G,eAAgB,SAAC7G,EAAKE,GAAN,OAAce,EXpDR,SAACjB,EAAKE,GAChC,MAAO,CACHnB,KAAM,mBACNC,QAAS,CACLgB,MAAKE,QWgD8B2G,CAAe7G,EAAKE,KAC3DiK,oBAAqB,kBAAMlJ,EX7HxB,CAAElC,KAAM,4BW8HX+H,mBAAoB,SAAC9C,GAAD,OAAW/C,EX7CL,SAAC+C,GAC/B,MAAQ,CACJjF,KAAM,sBACNC,QAAS,CAAEgF,UW0C6B8C,CAAmB9C,KAC3DnF,iBAAkB,SAACC,GAAD,OAAUmC,EAASpC,EAAiBC,KACtDG,gBAAiB,SAACC,GAAD,OAAe+B,EAAShC,EAAgBC,KACzDqL,eAAgB,kBAAMtJ,EAAShC,MAC/BuL,eAAgB,kBAAMvJ,EXxBnB,CAAElC,KAAM,wBW4BJ8F,CAA6CqE,ICvKtDuB,G,2KACQ,IAAD,EAQYhF,KAAKC,MAAMlB,WALpBhG,GAHH,EAEGF,KAFH,EAGGE,WACAC,EAJH,EAIGA,QACAF,EALH,EAKGA,KACAG,EANH,EAMGA,UACAC,EAPH,EAOGA,SACAC,EARH,EAQGA,KAEF8L,EAAe,SAACvF,GAAD,OAAsB,IAAVA,EAAe,GAAhB,UAAwBA,EAAxB,MAGhC,OACI,yBAAKwF,MAAO,CAACC,MAAO,MAAOC,OAAQ,OAAQC,UAAW,QAClD,yBAAKzF,UAAU,6BAEX,yBAAK0F,MAAM,aACP,yBAAKA,MAAM,SACP,yBAAK1F,UAAS,kBAAqBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UAExF,yBAAKF,MAAM,SAAX,UAGJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SACP,yBAAK1F,UAAS,mBAAsBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UAEzF,yBAAKF,MAAM,SAAX,QAGJ,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAalM,GAAjC,IAA6C,yBAAK6G,UAAS,sBAAyBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UACrI,yBAAKF,MAAM,SACP,4CAIR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAanM,GAAjC,IAAwC,yBAAK8G,UAAS,iBAAoBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UAC3H,yBAAKF,MAAM,SACP,uCAIR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAajM,GAAjC,IAA2C,yBAAK4G,UAAS,oBAAuBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UACjI,yBAAKF,MAAM,SACP,0CAIR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAahM,GAAjC,IAA6C,yBAAK2G,UAAS,sBAAyBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UACrI,yBAAKF,MAAM,SACP,4CAIR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAa/L,GAAjC,IAA4C,yBAAK0G,UAAS,qBAAwBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UACnI,yBAAKF,MAAM,SACP,2CAIR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,SAASL,EAAa9L,GAAjC,IAAwC,yBAAKyG,UAAS,iBAAoBsF,MAAO,CAACK,OAAQ,kBAAmBC,aAAc,UAC3H,yBAAKF,MAAM,SACP,6C,GAtEJhF,IAAMC,WAmGfnB,gBAlBS,SAAAhF,GACpB,MAAO,CACHf,KAAMe,EAAMf,KACZ6F,cAAe9E,EAAM8E,cACrBD,kBAAmB7E,EAAM6E,kBACzBhE,gBAAiBb,EAAMa,gBACvBG,cAAehB,EAAMgB,cACrB2D,WAAY3E,EAAM2E,eAIC,SAAAvD,GACvB,MAAO,CACHpC,iBAAkB,SAACC,GAAD,OAAUmC,EAASpC,EAAiBC,KACtDG,gBAAiB,kBAAMgC,EAAShC,SAIzB4F,CAA6C4F,ICpF7CS,I,kLAVP,OACI,yBAAK9F,GAAG,UAAUC,UAAU,OACxB,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,W,GAPEU,IAAMC,YCEXxF,GAAQ2K,YAAYC,GAASC,OAAOC,8BAAgCD,OAAOC,gCAExFC,IAASC,OAAO,kBAAC,IAAD,CAAUhL,MAAOA,IAAO,kBAAC,GAAD,OAAoBiL,SAASC,cAAc,Y","file":"static/js/main.0eb6f89f.chunk.js","sourcesContent":["export const gridDetails = {\r\n    TOTAL_ROW: 21,\r\n    TOTAL_COL: 50,\r\n    START_NODE_ROW: 10,\r\n    START_NODE_COL: 5,\r\n    FINISH_NODE_ROW: 10,\r\n    FINISH_NODE_COL: 45 \r\n}\r\n\r\nexport const defaultStatistics = {\r\n    show: false,\r\n    wall: 0,\r\n    unvisited: gridDetails.TOTAL_ROW * gridDetails.TOTAL_COL - 2,\r\n    visited: 0,\r\n    backtrack: 0,\r\n    frontier: 0,\r\n    path: 0\r\n}","const toggleWallNode = (row, col) => {\r\n    return {\r\n        type: 'TOOGLE_WALL_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nconst mouseIsPressed = () => {\r\n    return { type: 'PRESSED'};\r\n}\r\n\r\nexport const mouseIsNotPressed = () => {\r\n    return { type: 'NOT_PRESSED'};\r\n}\r\n\r\nexport const onMouseDown = (row, col, dispatch, grid) => {\r\n    dispatch(toggleWallNode(row, col));\r\n    dispatch(mouseIsPressed());\r\n    dispatch(updateStatistics(grid));\r\n}\r\n\r\n\r\nexport const runAlgorithm = () => {\r\n    return { type: 'RUN_ALGORITHM'};\r\n}\r\n\r\nexport const stopAlgorithm = () => {\r\n    return { type: 'STOP_ALGORITHM'};\r\n}\r\n\r\nexport const showInitialBoard = () => {\r\n    return { type: 'SHOW_INITIAL_BOARD'};\r\n}\r\n\r\nexport const resetBoardWithWalls = () => {\r\n    return { type: 'RESET_BOARD_WITH_WALLS'};\r\n}\r\n\r\nexport const pauseAlgorithm = () => {\r\n    return { type: 'PAUSE_ALGORITHM'};\r\n}\r\n\r\nexport const completeAlgorithm = () => {\r\n    return { type: 'COMPLETE_ALGORITHM'};\r\n}\r\n\r\nexport const toggleFrontierNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_FRONTIER_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleVisitedNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_VISITED_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const togglePathNode = (row, col) => {\r\n    return {\r\n        type: 'TOGGLE_PATH_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const setSelectedAlgorithm = (algorithmName) => {\r\n    return {\r\n        type: algorithmName\r\n    }\r\n}\r\n\r\nexport const resetDataStructure = () => {\r\n    return { type: 'RESET_DATA_STRUCTURE' }\r\n}\r\n\r\nexport const setDataStructure = (dataStructure) => {\r\n    return {\r\n        type: 'SET_DATA_STRUCTURE',\r\n        payload: dataStructure\r\n    }\r\n}\r\n\r\nexport const showingPath = () => {\r\n    return { type: 'SHOWING_PATH' };\r\n}\r\n\r\nexport const notShowingPath = () => {\r\n    return { type: 'NOT_SHOWING_PATH' };\r\n}\r\n\r\nexport const markHeadNode = (row, col) => {\r\n    return {\r\n        type: 'MARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const unmarkHeadNode = (row, col) => {\r\n    return {\r\n        type: 'UNMARK_HEAD_NODE',\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const markBacktrackNodes = (array) => {\r\n    return  {\r\n        type: 'MARK_BACKTRACK_NODE',\r\n        payload: { array }\r\n    }\r\n}\r\n\r\nexport const updateStatistics = (grid) => {\r\n    return { \r\n        type: 'UPDATE_STATISTICS', \r\n        payload: grid \r\n    };\r\n}\r\n\r\nexport const resetStatistics = (resetWall) => {\r\n    return { \r\n        type: 'RESET_STATISTICS',\r\n        payload: resetWall };\r\n}\r\n\r\nexport const showStatistics = () => {\r\n    return { type: 'SHOW_STATISTICS' };\r\n}\r\n\r\nexport const hideStatistics = () => {\r\n    return { type: 'HIDE_STATISTICS' };\r\n}\r\n","import { gridDetails } from '../constants';\r\nimport { store } from '../index';\r\nimport Stack from '@datastructures-js/stack';\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\nimport { showingPath, notShowingPath } from '../actions';\r\n\r\nconst { TOTAL_ROW, TOTAL_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const getNodeNeighbours = (state, node) => {\r\n    let neighbours = [];\r\n\r\n    if(node.row > 0) {\r\n        const upNode = state[node.row - 1][node.col];\r\n        neighbours.push(upNode);\r\n    }\r\n\r\n    if(node.col < (TOTAL_COL - 1)) {\r\n        const rightNode = state[node.row][node.col + 1];\r\n        neighbours.push(rightNode);\r\n    }\r\n\r\n    if(node.row < (TOTAL_ROW - 1)) {\r\n        const downNode = state[node.row + 1][node.col];\r\n        neighbours.push(downNode);\r\n    }\r\n\r\n    if(node.col > 0) {\r\n        const leftNode = state[node.row][node.col - 1];\r\n        neighbours.push(leftNode);\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\nexport const isAlgorithmRunning = () => {\r\n    return (store.getState().algorithmStatus === 'RUNNING');\r\n}\r\n\r\nexport const isAlgorithmPaused = () => {\r\n    return (store.getState().algorithmStatus === 'PAUSED');\r\n}\r\n\r\nexport const isAlgorithmStopped = () => {\r\n    return (store.getState().algorithmStatus === 'STOPPED');\r\n}\r\n\r\nconst isShowingPath = () => {\r\n    return store.getState().isShowingPath;\r\n}\r\n\r\nexport async function showPath(state, togglePathNode, updateStatistics) {\r\n    store.dispatch(showingPath());\r\n\r\n    const finishNode = state[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let currentNode = finishNode;\r\n    const stack = new Stack();\r\n    while(currentNode !== undefined) {\r\n        stack.push(currentNode);\r\n\r\n        if(!currentNode.previousNode) {\r\n            break;\r\n        }\r\n        currentNode = state[currentNode.previousNode.row][currentNode.previousNode.col];\r\n    }\r\n\r\n    while(!stack.isEmpty()) {\r\n        if(isAlgorithmStopped() || !isShowingPath()) {\r\n            return;\r\n        }\r\n\r\n        let node = stack.pop();\r\n        togglePathNode(node.row, node.col);\r\n        updateStatistics(state);\r\n        await sleep(20);\r\n    }\r\n\r\n    store.dispatch(notShowingPath());\r\n}\r\n\r\nexport const calculateMahattanDistance = (nodeRow, nodeCol, targetRow, targetCol) => {\r\n    return Math.abs(nodeRow - targetRow) + Math.abs(nodeCol - targetCol);\r\n}\r\n\r\nexport const updatePqueue = (pqueue, node) => {\r\n    const { row, col, fCost } = node;\r\n    const newPqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n    let inQueue = false;\r\n\r\n    while(!pqueue.isEmpty()) {\r\n        const frontierNode = pqueue.dequeue().element;\r\n\r\n        if(frontierNode.row === row && frontierNode.col === col) {\r\n            inQueue = true;\r\n            if(frontierNode.fCost <= fCost) {\r\n                newPqueue.enqueue(frontierNode);\r\n            } else {    \r\n                newPqueue.enqueue(node);\r\n            }\r\n        } else {\r\n            newPqueue.enqueue(frontierNode);\r\n        }\r\n    }\r\n\r\n    if(!inQueue) {\r\n        newPqueue.enqueue(node);\r\n    }\r\n\r\n    return newPqueue;\r\n}","import { gridDetails, defaultStatistics } from '../constants';\r\nimport { calculateMahattanDistance } from './AlgorithmUtil';\r\nimport { store } from '../index';\r\nimport { updateStatistics } from '../actions';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL, TOTAL_ROW, TOTAL_COL} = gridDetails;\r\n\r\nfunction NodeFactory(row, col) {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        isFrontier: false,\r\n        isHead: false,\r\n        isBacktrack: false,\r\n        previousNode: null,\r\n        isPath: false,\r\n        hCost: calculateMahattanDistance(row, col, FINISH_NODE_ROW, FINISH_NODE_COL),\r\n        gCost: null,\r\n        fCost: null\r\n      };\r\n}\r\n\r\nexport function generateInitalGrid() {\r\n    const grid = [];\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        const currentRow = [];\r\n\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            currentRow.push(NodeFactory(r, c));\r\n        }\r\n\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport function generateToggleWallGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateToggleFrontierGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isFrontier: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkVisitedGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isVisited: true,\r\n        isFrontier: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkPathGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isPath: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateGridWithWalls(currentGrid) {\r\n    const newGrid = generateInitalGrid();\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const currentNode = currentGrid[r][c];\r\n            if(!currentNode.isFinish && !currentNode.isStart) {  \r\n                newGrid[r][c].isWall = currentNode.isWall;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: true\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateUnmarkHeadGrid(row, col, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n        ...node,\r\n        isHead: false\r\n    };\r\n    newGrid[row][col] = newNode;\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateMarkBacktrackGrid(array, currentGrid) {\r\n    const newGrid = currentGrid.slice();\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const { row, col } = array[i];\r\n        const node = newGrid[row][col];\r\n\r\n        const newNode = {\r\n            ...node,\r\n            isBacktrack: true\r\n        };\r\n        newGrid[row][col] = newNode;\r\n    }\r\n            \r\n    return newGrid;\r\n}\r\n\r\nexport function generateNodeKey(row, col) {\r\n    return (row * TOTAL_ROW + col).toString();\r\n}\r\n\r\nexport function getStatistics(grid, show) {\r\n    const stats = { ...defaultStatistics };\r\n\r\n    for(let r = 0; r < TOTAL_ROW; r++) {\r\n        for(let c = 0; c < TOTAL_COL; c++) {\r\n            const node = grid[r][c];\r\n\r\n            if(node.isWall) {\r\n                stats.wall++;\r\n            }\r\n\r\n            if(node.isVisited) {\r\n                stats.visited++;\r\n            }\r\n\r\n            if(node.isBacktrack) {\r\n                stats.backtrack++;\r\n            }\r\n\r\n            if(node.isFrontier) {\r\n                stats.frontier++;\r\n            }\r\n            \r\n            if(node.isPath) {\r\n                stats.path++;\r\n            }\r\n        }\r\n    }\r\n\r\n    stats.unvisited = (TOTAL_ROW * TOTAL_COL - 2) - stats.wall - stats.visited - stats.backtrack - stats.frontier;\r\n    stats.show = show;\r\n\r\n    return stats;\r\n}\r\n\r\nexport function resetStatistics(wall, resetWall) {\r\n    const stats = { ...defaultStatistics };\r\n\r\n    if(!resetWall) {\r\n        stats.wall = wall;\r\n        stats.unvisited = stats.unvisited - wall;\r\n    }\r\n\r\n    return stats\r\n}","import { combineReducers } from 'redux';\r\nimport { defaultStatistics } from '../constants';\r\nimport { generateInitalGrid,\r\n         generateToggleWallGrid, \r\n         generateToggleFrontierGrid, \r\n         generateMarkVisitedGrid, \r\n         generateMarkPathGrid, \r\n         generateGridWithWalls, \r\n         generateMarkHeadGrid, \r\n         generateUnmarkHeadGrid, \r\n         generateMarkBacktrackGrid, \r\n         getStatistics,\r\n         resetStatistics } from '../util/GridGenerationUtil';\r\n\r\nconst gridReducer = (state=generateInitalGrid(), action) => {\r\n    switch(action.type) {\r\n        case 'TOOGLE_WALL_NODE':\r\n            return generateToggleWallGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_FRONTIER_NDOE':\r\n            return generateToggleFrontierGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_VISITED_NODE':\r\n            return generateMarkVisitedGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'TOGGLE_PATH_NODE':\r\n            return generateMarkPathGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'SHOW_INITIAL_BOARD':\r\n            return generateInitalGrid();\r\n\r\n        case 'RESET_BOARD_WITH_WALLS':\r\n            return generateGridWithWalls(state);\r\n\r\n        case 'MARK_HEAD_NODE':\r\n            return generateMarkHeadGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'UNMARK_HEAD_NODE':\r\n            return generateUnmarkHeadGrid(action.payload.row, action.payload.col, state);\r\n\r\n        case 'MARK_BACKTRACK_NODE':\r\n            return generateMarkBacktrackGrid(action.payload.array, state);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst dataStructureReducer = (state=null, action) => {\r\n    switch(action.type) {\r\n        case 'RESET_DATA_STRUCTURE':\r\n            return null;\r\n\r\n        case 'SET_DATA_STRUCTURE':\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst mousePressedReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'PRESSED':\r\n            return true;\r\n\r\n        case 'NOT_PRESSED':\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectAlgorithmReducer = (state='none', action) => {\r\n    switch(action.type) {\r\n        case 'BFS':\r\n            return 'BFS';\r\n\r\n        case 'DFS':\r\n            return 'DFS';\r\n\r\n        case 'ASTAR':\r\n            return 'ASTAR';\r\n\r\n        case 'GREED':\r\n            return 'GREED';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst algorithmStatusReducer = (state='STOPPED', action) => {\r\n    switch(action.type) {\r\n        case 'RUN_ALGORITHM':\r\n            return 'RUNNING';\r\n\r\n        case 'STOP_ALGORITHM':\r\n            return 'STOPPED';\r\n\r\n        case 'PAUSE_ALGORITHM':\r\n            return 'PAUSED';\r\n\r\n        case 'COMPLETE_ALGORITHM':\r\n            return 'COMPLETE';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst isShowingPathReducer = (state=false, action) => {\r\n    switch(action.type) {\r\n        case 'SHOWING_PATH':\r\n            return true;\r\n\r\n        case 'NOT_SHOWING_PATH':\r\n            return false;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst statisticsReducer = (state=defaultStatistics, action) => {\r\n    switch(action.type) {\r\n        case 'UPDATE_STATISTICS':\r\n            return getStatistics(action.payload, state.show);\r\n\r\n        case 'RESET_STATISTICS':\r\n            return resetStatistics(state.wall, action.payload);\r\n\r\n        case 'SHOW_STATISTICS':\r\n            return { ...defaultStatistics, show: true };\r\n\r\n        case 'HIDE_STATISTICS':\r\n            return { ...defaultStatistics, show: false }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    statistics: statisticsReducer,\r\n    algorithmStatus: algorithmStatusReducer,\r\n    selectedAlgorithm: selectAlgorithmReducer,\r\n    isShowingPath: isShowingPathReducer,\r\n    grid: gridReducer,\r\n    dataStructure: dataStructureReducer,\r\n    isMousePressed: mousePressedReducer\r\n});","import '../css/Node.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { mouseIsNotPressed, onMouseDown } from '../actions'\r\n\r\nconst Node = ({ row, col, isStart, isFinish, isWall, isHead, isVisited, isFrontier, isPath, isBacktrack, isMousePressed, onMouseDown, mouseIsNotPressed, fCost, selectedAlgorithm, grid }) => {\r\n    const nodeType = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isPath\r\n        ? 'node-path'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : isHead\r\n        ? 'node-head'\r\n        : isBacktrack\r\n        ? 'node-backtrack'\r\n        : isVisited\r\n        ? 'node-visited'\r\n        : isFrontier\r\n        ? 'node-frontier'\r\n        : ''\r\n\r\n    const value = ((selectedAlgorithm === 'ASTAR' || selectedAlgorithm === 'GREED') && (fCost !== null)) ? fCost : ''\r\n\r\n    return <div \r\n            id={`node-${row}-${col}`}\r\n            className={`node ${nodeType}`}\r\n            onMouseDown={(!isFrontier && !isVisited && !isFinish && !isStart) ? () => onMouseDown(grid) : () => {}}\r\n            onMouseUp={mouseIsNotPressed}\r\n            onMouseEnter={(isMousePressed && !isWall && !isFrontier && !isVisited && !isFinish && !isStart) ? () => onMouseDown(grid) : () => {}}>{value}</div>\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const node = state.grid[ownProps.row][ownProps.col];\r\n\r\n    return {\r\n        isStart:  node.isStart,\r\n        isFinish: node.isFinish,\r\n        isWall: node.isWall,\r\n        isFrontier: node.isFrontier,\r\n        isVisited: node.isVisited,\r\n        isPath: node.isPath,\r\n        isHead: node.isHead,\r\n        isBacktrack: node.isBacktrack,\r\n        isMousePressed: state.isMousePressed,\r\n        hCost: node.hCost,\r\n        gCost: node.gCost,\r\n        fCost: node.fCost,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        grid: state.grid\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onMouseDown: (grid) => onMouseDown(ownProps.row, ownProps.col, dispatch, grid),\r\n        mouseIsNotPressed: () => dispatch(mouseIsNotPressed()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","import React from 'react';\r\nimport Node from './Node';\r\nimport { connect } from 'react-redux';\r\nimport '../css/Grid.css';\r\nimport { generateNodeKey } from '../util/GridGenerationUtil'\r\n\r\nclass Grid extends React.Component {\r\n\r\n    render() {\r\n        const {grid} = this.props;\r\n\r\n        return (\r\n            <div className=\"grid\">\r\n                {\r\n                    grid.map((row, rowIndex) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIndex}>\r\n                                {\r\n                                    row.map((col, colIndex) => {\r\n                                        return (<Node \r\n                                                    key={generateNodeKey(rowIndex, colIndex)}\r\n                                                    row={rowIndex} \r\n                                                    col={colIndex}/>);\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                        \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Grid);","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\n\r\nimport Queue from 'queue-fifo';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n  \r\nexport default class BFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n        this.updateStatistics = updateStatistics;\r\n    }\r\n\r\n    async run(grid, queue) {\r\n        if(queue === null) {\r\n            queue = new Queue();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            queue.enqueue(startNode);\r\n        }\r\n\r\n        while(!queue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = queue.dequeue();\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    queue.enqueue(neighbour);\r\n                }\r\n            }\r\n            this.updateStatistics(grid);\r\n            await sleep(0);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(queue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n        \r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath} from '../AlgorithmUtil';\r\nimport Stack from '@datastructures-js/stack';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class DFS {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure, updateStatistics) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.markHeadNode = markHeadNode;\r\n        this.unmarkHeadNode = unmarkHeadNode;\r\n        this.markBacktrackNodes = markBacktrackNodes;\r\n        this.setDataStructure = setDataStructure;\r\n        this.updateStatistics = updateStatistics;\r\n    }\r\n\r\n    async run(grid, stacks) {\r\n        let unvisitedStack = null;\r\n        let visitedStack = null;\r\n        let wasBacktracking = null;\r\n\r\n        if(stacks === null) {\r\n            unvisitedStack = new Stack();\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            unvisitedStack.push(startNode);\r\n\r\n            visitedStack = new Stack();\r\n            wasBacktracking = false;\r\n        } else {\r\n            unvisitedStack = stacks.unvisitedStack;\r\n            visitedStack = stacks.visitedStack;\r\n            wasBacktracking = stacks.wasBacktracking;\r\n        }\r\n\r\n        while(!unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            if(wasBacktracking) {\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n                await sleep(20);\r\n                continue;\r\n            }\r\n\r\n\r\n            const currentNode = unvisitedStack.pop();\r\n            unvisitedStack = this.removeFromStack(unvisitedStack, currentNode);\r\n\r\n            currentNode.isVisited = true;\r\n            currentNode.isHead = true;\r\n            this.markHeadNode(currentNode.row, currentNode.col);\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.previousNode !== null) {\r\n                const { row, col } = currentNode.previousNode;\r\n                grid[row][col].isHead = false;\r\n                this.unmarkHeadNode(row, col);\r\n            }\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = neighbours.length - 1; i >= 0; i--) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier) {\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    unvisitedStack.push(neighbour);\r\n                }\r\n            }\r\n\r\n            visitedStack.push(currentNode);\r\n\r\n            const validNeighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n\r\n            if(validNeighbours.length === 0) {\r\n                // console.log(`deadend: ${currentNode.row}, ${currentNode.col}`)\r\n                // console.log(`unvisited: ${unvisitedStack.toArray().map(i => `(${i.row}, ${i.col}) `)}`)\r\n                // console.log(`visited: ${visitedStack.toArray().map(i => `(${i.row}, ${i.col}) `)}`)\r\n                currentNode.isHead = false;\r\n                this.unmarkHeadNode(currentNode.row, currentNode.col);\r\n                await sleep(20);\r\n                wasBacktracking = await this.backtrack(visitedStack, unvisitedStack, grid);\r\n               \r\n            }\r\n\r\n            this.updateStatistics(grid);\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure({ unvisitedStack: unvisitedStack, visitedStack: visitedStack, wasBacktracking: wasBacktracking });\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    async backtrack(visitedStack, unvisitedStack, grid) {\r\n\r\n        let backtrackNodes = [];\r\n\r\n        while(!visitedStack.isEmpty() && !unvisitedStack.isEmpty() && isAlgorithmRunning()) {\r\n            const visitedNode = visitedStack.pop();\r\n\r\n            let neighbours = getNodeNeighbours(grid, visitedNode);\r\n            neighbours = neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited && !neighbour.isFrontier)\r\n            if(this.contains(neighbours, unvisitedStack.peek())) {\r\n                // console.log(`backtrack ${unvisitedStack.peek().row}, ${unvisitedStack.peek().col}`)\r\n                visitedStack.push(visitedNode);\r\n                this.markBacktrackNodes(backtrackNodes);\r\n                return;\r\n            } else {\r\n                backtrackNodes.push(visitedNode);\r\n            }   \r\n        }\r\n\r\n    }\r\n\r\n    contains(neighbours, target) {\r\n        for(let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            if(neighbour.row === target.row && neighbour.col === target.col) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    removeFromStack(stack, target) {\r\n        const newStack = new Stack();\r\n        const tempStack = new Stack();\r\n\r\n        while(!stack.isEmpty()) {\r\n            const current = stack.pop();\r\n            if(current.row === target.row && current.col === target.col) {\r\n                continue;\r\n            }\r\n\r\n            tempStack.push(current);\r\n        }\r\n\r\n        while(!tempStack.isEmpty()) {\r\n            newStack.push(tempStack.pop());\r\n        }\r\n\r\n        return newStack;\r\n    }\r\n}\r\n","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\n\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class AStar {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n        this.updateStatistics = updateStatistics;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            startNode.gCost = 0;\r\n            startNode.fCost = startNode.gCost + startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                        return;\r\n                    }\r\n\r\n                    // neighbour.isFrontier = true;\r\n                    // neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    // this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                    \r\n                    // neighbour.gCost = currentNode.gCost + 1;\r\n                    // neighbour.fCost = neighbour.gCost + neighbour.hCost;\r\n                    // pqueue = updatePqueue(pqueue, neighbour);\r\n\r\n                    const tempG = currentNode.gCost + 1;\r\n                    const tempF = tempG + neighbour.hCost;\r\n                    if(neighbour.gCost !== null) {\r\n                        if(tempF < neighbour.fCost) {\r\n                            neighbour.gCost = tempG;\r\n                            neighbour.fCost = tempF;\r\n                            neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                        } \r\n                    } else {\r\n                        neighbour.gCost = tempG;\r\n                        neighbour.fCost = tempF;\r\n                        pqueue.enqueue(neighbour);\r\n                        neighbour.isFrontier = true;\r\n                        neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    }\r\n\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n                }\r\n            }\r\n\r\n            this.updateStatistics(grid);\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import { gridDetails } from '../../constants';\r\nimport { getNodeNeighbours, sleep , isAlgorithmRunning, isAlgorithmPaused, isAlgorithmStopped, showPath, updatePqueue } from '../AlgorithmUtil';\r\n\r\nimport { MinPriorityQueue } from '@datastructures-js/priority-queue';\r\n\r\nconst  {START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } = gridDetails;\r\n\r\nexport default class Greedy {\r\n    constructor(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics) {\r\n        this.toggleVisitedNode = toggleVisitedNode;\r\n        this.toggleFrontierNode = toggleFrontierNode;\r\n        this.togglePathNode = togglePathNode;\r\n        this.setDataStructure = setDataStructure;\r\n        this.updateStatistics = updateStatistics;\r\n    }\r\n\r\n    async run(grid, pqueue) {\r\n        if(pqueue === null) {\r\n            pqueue = new MinPriorityQueue({ priority: (node) => node.fCost });\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            startNode.fCost = startNode.hCost;\r\n            pqueue.enqueue(startNode);\r\n        }\r\n\r\n\r\n        while(!pqueue.isEmpty() && isAlgorithmRunning()) {\r\n            const currentNode = pqueue.dequeue().element;\r\n            currentNode.isFrontier = false;\r\n            currentNode.isVisited = true;\r\n            this.toggleVisitedNode(currentNode.row, currentNode.col);\r\n\r\n            if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                return;\r\n            }\r\n\r\n            const neighbours = getNodeNeighbours(grid, currentNode);\r\n            for(let i = 0; i < neighbours.length; i++) {\r\n                const neighbour = neighbours[i];\r\n                if(!neighbour.isWall && !neighbour.isVisited) {\r\n\r\n                    if(currentNode.row === FINISH_NODE_ROW && currentNode.col === FINISH_NODE_COL) {\r\n                        await showPath(grid, this.togglePathNode, this.updateStatistics);\r\n                        return;\r\n                    }\r\n\r\n                    neighbour.isFrontier = true;\r\n                    neighbour.previousNode = { row: currentNode.row, col: currentNode.col};\r\n                    this.toggleFrontierNode(neighbour.row, neighbour.col);\r\n\r\n                    neighbour.fCost = neighbour.hCost;\r\n                    pqueue.enqueue(neighbour);\r\n                }\r\n            }\r\n\r\n            this.updateStatistics(grid);\r\n            await sleep(40);\r\n        }\r\n\r\n        if(isAlgorithmPaused()) {\r\n            this.setDataStructure(pqueue);\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmStopped()) {\r\n            return;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport { setSelectedAlgorithm } from '../actions';\r\n\r\nconst options = [\r\n    { key: 1, text: 'Breadth First Search (BFS)', value: 'BFS' },\r\n    { key: 2, text: 'Depth First Search (DFS)', value: 'DFS' },\r\n    { key: 3, text: 'A* Search', value: 'ASTAR' },\r\n    { key: 4, text: 'Greedy Best-First Search', value: 'GREED' }\r\n  ]\r\n\r\nclass SelectAlgorithmDropdown extends React.Component {\r\n    render() {\r\n        const selectedAlgorithmText = this.props.selectedAlgorithm === 'none' ? 'Select Algorithm' \r\n                                                                              : this.props.selectedAlgorithm === 'BFS'\r\n                                                                              ? 'Breadth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'DFS'\r\n                                                                              ? 'Depth First Search (BFS)'\r\n                                                                              : this.props.selectedAlgorithm === 'ASTAR'\r\n                                                                              ? 'A* Search'\r\n                                                                              : this.props.selectedAlgorithm === 'GREED'\r\n                                                                              ? 'Greedy Best-First Search'\r\n                                                                              : 'Select Algorithm';\r\n\r\n        const disabled = this.props.algorithmStatus !== 'STOPPED';\r\n\r\n        return (\r\n            <Dropdown \r\n                fluid text={selectedAlgorithmText} \r\n                options={options} \r\n                simple item onChange={(event, data) => {this.props.onChange(data.value)}}\r\n                disabled={disabled}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: (algorithm) => {dispatch(setSelectedAlgorithm(algorithm))}\r\n    }\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAlgorithmDropdown)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BFS from '../util/algorithms/BFS';\r\nimport DFS from '../util/algorithms/DFS';\r\nimport AStar from '../util/algorithms/AStar';\r\nimport Greedy from '../util/algorithms/Greedy';\r\nimport { isAlgorithmRunning } from '../util/AlgorithmUtil'\r\nimport SelectAlgorithmDropdown from './SelectAlgorithmDropdown';\r\nimport { showInitialBoard, \r\n    runAlgorithm, \r\n    stopAlgorithm, \r\n    pauseAlgorithm, \r\n    completeAlgorithm, \r\n    toggleFrontierNode, \r\n    toggleVisitedNode, \r\n    togglePathNode, \r\n    resetDataStructure, \r\n    setDataStructure, \r\n    notShowingPath, \r\n    markHeadNode, \r\n    unmarkHeadNode, \r\n    resetBoardWithWalls, \r\n    markBacktrackNodes,\r\n    updateStatistics,\r\n    resetStatistics,\r\n    showStatistics,\r\n    hideStatistics } from '../actions';\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.runSelectedAlgorithm = this.runSelectedAlgorithm.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n\r\n    }\r\n\r\n    async runSelectedAlgorithm() {\r\n        const { selectedAlgorithm, \r\n                runAlgorithm, \r\n                pauseAlgorithm,\r\n                completeAlgorithm, \r\n                grid,\r\n                dataStructure,\r\n                toggleVisitedNode, \r\n                toggleFrontierNode, \r\n                togglePathNode,\r\n                setDataStructure,\r\n                isShowingPath,\r\n                markHeadNode,\r\n                unmarkHeadNode,\r\n                algorithmStatus,\r\n                markBacktrackNodes,\r\n                updateStatistics } = this.props;\r\n\r\n        if(selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') {\r\n            return;\r\n        }\r\n\r\n        if(isAlgorithmRunning()) {\r\n            pauseAlgorithm();\r\n            return;\r\n        }\r\n\r\n        runAlgorithm();\r\n\r\n        switch(selectedAlgorithm) {\r\n            case \"BFS\":\r\n                const bfs = new BFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics);\r\n                await bfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"DFS\":\r\n                const dfs = new DFS(toggleVisitedNode, toggleFrontierNode, togglePathNode, markHeadNode, unmarkHeadNode, markBacktrackNodes, setDataStructure, updateStatistics);\r\n                await dfs.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"ASTAR\":\r\n                const aStar = new AStar(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics);\r\n                await aStar.run(grid, dataStructure);\r\n                break;\r\n\r\n            case \"GREED\":\r\n                const greedy = new Greedy(toggleVisitedNode, toggleFrontierNode, togglePathNode, setDataStructure, updateStatistics);\r\n                await greedy.run(grid, dataStructure);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        if(isAlgorithmRunning()) {\r\n            completeAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    clearBoard(clearWall) {\r\n        this.props.notShowingPath();\r\n        this.props.stopAlgorithm();\r\n        this.props.resetDataStructure();\r\n        this.props.resetStatistics(clearWall);\r\n\r\n        if(clearWall) {\r\n            this.props.showInitialBoard();\r\n        } else {\r\n            this.props.resetBoardWithWalls();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { selectedAlgorithm, algorithmStatus, isShowingPath } = this.props;\r\n\r\n        const runButtonClass = (selectedAlgorithm === 'none' || isShowingPath || algorithmStatus === 'COMPLETE') ? \"active item\" : \"item\";\r\n\r\n        let runButtonText = \"Run\";\r\n        if((algorithmStatus === 'RUNNING' && isShowingPath) || algorithmStatus === 'COMPLETE') {\r\n            runButtonText = \"Complete\";\r\n        }\r\n\r\n        if(algorithmStatus === 'RUNNING' && !isShowingPath) {\r\n            runButtonText = \"Pause\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui four item menu\">\r\n                <a  onClick={this.runSelectedAlgorithm} className={runButtonClass}>{runButtonText}!</a>\r\n                <SelectAlgorithmDropdown />\r\n                <a onClick={() => this.clearBoard(false)} className=\"item\">Clear Path</a>\r\n                <a onClick={() => this.clearBoard(true)} className=\"item\">Clear Board</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.statistics\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        showInitialBoard: () => dispatch(showInitialBoard()),\r\n        runAlgorithm: () => dispatch(runAlgorithm()),\r\n        stopAlgorithm: () => dispatch(stopAlgorithm()),\r\n        pauseAlgorithm: () => dispatch(pauseAlgorithm()),\r\n        completeAlgorithm: () => dispatch(completeAlgorithm()),\r\n        toggleVisitedNode: (row, col) => dispatch(toggleVisitedNode(row, col)),\r\n        toggleFrontierNode: (row, col) => dispatch(toggleFrontierNode(row, col)),\r\n        togglePathNode: (row, col) => dispatch(togglePathNode(row, col)),\r\n        resetDataStructure: () => dispatch(resetDataStructure()),\r\n        setDataStructure: (dataStructure) => dispatch(setDataStructure(dataStructure)),\r\n        notShowingPath: () => dispatch(notShowingPath()),\r\n        markHeadNode: (row, col) => dispatch(markHeadNode(row, col)),\r\n        unmarkHeadNode: (row, col) => dispatch(unmarkHeadNode(row, col)),\r\n        resetBoardWithWalls: () => dispatch(resetBoardWithWalls()),\r\n        markBacktrackNodes: (array) => dispatch(markBacktrackNodes(array)),\r\n        updateStatistics: (grid) => dispatch(updateStatistics(grid)),\r\n        resetStatistics: (resetWall) => dispatch(resetStatistics(resetWall)),\r\n        showStatistics: () => dispatch(resetStatistics()),\r\n        hideStatistics: () => dispatch(hideStatistics())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateStatistics, resetStatistics } from '../actions';\r\n\r\nclass InfoPanel extends React.Component {\r\n    render() {\r\n\r\n        const { show,\r\n                unvisited,\r\n                visited,\r\n                wall,\r\n                backtrack,\r\n                frontier,\r\n                path } = this.props.statistics;\r\n\r\n        const displayValue = (value) => (value === 0) ? \"\" : `${value} ` \r\n\r\n\r\n        return (\r\n            <div style={{width: \"85%\", margin: \"auto\", marginTop: \"2vh\"}}>\r\n                <div className=\"ui small eight statistics\">\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-start`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">start</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">\r\n                            <div className={`node node-finish`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} />\r\n                        </div>\r\n                        <div class=\"label\">end</div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(unvisited)} <div className={`node node-unvisited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>unvisited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(wall)} <div className={`node node-wall`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>wall</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(visited)} <div className={`node node-visited`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>visited</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(backtrack)} <div className={`node node-backtrack`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>backtrack</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(frontier)} <div className={`node node-frontier`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>frontier</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div class=\"statistic\">\r\n                        <div class=\"value\">{displayValue(path)} <div className={`node node-path`} style={{border: \"2px solid white\", borderRadius: \"5px\"}} /></div>\r\n                        <div class=\"label\">\r\n                            <div>path</div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        grid: state.grid,\r\n        dataStructure: state.dataStructure,\r\n        selectedAlgorithm: state.selectedAlgorithm,\r\n        algorithmStatus: state.algorithmStatus,\r\n        isShowingPath: state.isShowingPath,\r\n        statistics: state.statistics\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateStatistics: (grid) => dispatch(updateStatistics(grid)),\r\n        resetStatistics: () => dispatch(resetStatistics())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoPanel);","import React from 'react';\r\nimport Grid from './Grid';\r\nimport Menu from './Menu';\r\nimport InfoPanel from './InfoPanel';\r\nimport '../css/App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\" className=\"App\">\r\n                <Menu/>\r\n                <Grid />\r\n                <InfoPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport App from './components/App';\r\nimport './css/App.css';\r\n\r\nexport const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.querySelector('#root'));\r\n"],"sourceRoot":""}